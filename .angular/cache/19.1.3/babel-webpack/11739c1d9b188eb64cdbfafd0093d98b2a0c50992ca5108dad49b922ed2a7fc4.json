{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst routes = {\n  termianlClasses: 'schtrack-auth/api/v1/Class/GetClassesWithoutArm',\n  promotionMethod: 'schtrack-assessment/api/v1/Enums/PromotionMethod',\n  promotionType: 'schtrack-assessment/api/v1/Enums/PromotionType',\n  promotionSetup: 'schtrack-assessment/api/v1/PromotionSetup/GetPromotionSetup',\n  withdrawalSetup: 'schtrack-assessment/api/v1/PromotionSetup/GetWithdrawalSetup',\n  editPromotionSetup: 'schtrack-assessment/api/v1/PromotionSetup/AddOrUpdatePromotionSetup',\n  editWithdrawalSetup: 'schtrack-assessment/api/v1/PromotionSetup/AddOrUpdateWithdrawalSetup',\n  editTerminalclasses: 'schtrack-auth/api/v1/Class/UpdateClassSequenceAndTerminal',\n  classPool: 'schtrack-auth/api/v1/Promotion/GetClassPool',\n  repeatList: 'schtrack-auth/api/v1/Promotion/GetRepeatList',\n  withdrawnList: 'schtrack-auth/api/v1/Promotion/GetWithdrawnList',\n  promotionHighlight: 'schtrack-auth/api/v1/Promotion/GetPromotionHighlight',\n  submitReasons: 'schtrack-auth/api/v1/Promotion/PostClassPool',\n  submitResultsForPromotion: 'schtrack-assessment/api/v1/Promotion',\n  promoteAllStudents: 'schtrack-auth/api/v1/Promotion/PromoteAllStudent'\n};\nexport let PromotionService = /*#__PURE__*/(() => {\n  class PromotionService {\n    constructor(http) {\n      this.http = http;\n      this.baseUrl = environment.serverUrl;\n      this.baseUrl2 = environment.demourl;\n    }\n    getAllTerminalClasses() {\n      const url = `${this.baseUrl + routes.termianlClasses}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getPromotionType() {\n      const url = `${this.baseUrl + routes.promotionType}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getPromotionMethod() {\n      const url = `${this.baseUrl + routes.promotionMethod}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getPromotionSetup() {\n      const url = `${this.baseUrl + routes.promotionSetup}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getWithdrawalSetup() {\n      const url = `${this.baseUrl + routes.withdrawalSetup}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    updatePromotionSetup(payload) {\n      const url = `${this.baseUrl + routes.editPromotionSetup}`;\n      return this.http.post(url, payload, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    updateWithdrawalSetup(payload) {\n      const url = `${this.baseUrl + routes.editWithdrawalSetup}`;\n      return this.http.post(url, payload, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    updateTerminalClassSetup(payload) {\n      const url = `${this.baseUrl + routes.editTerminalclasses}`;\n      return this.http.put(url, payload, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getClassPool(sessionId, classId) {\n      const url = `${this.baseUrl + routes.classPool}/${sessionId}?classId=${classId}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getRepeatersList(sessionId, classId) {\n      const url = `${this.baseUrl + routes.repeatList}/${sessionId}?classId=${classId}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getWithDrawnList(sessionId, classId) {\n      const url = `${this.baseUrl + routes.withdrawnList}/${sessionId}?classId=${classId}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getPromotionHighlight(sessionId, classId) {\n      const url = `${this.baseUrl + routes.promotionHighlight}/${sessionId}?classId=${classId}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    postReasons(payload) {\n      const url = `${this.baseUrl + routes.submitReasons}`;\n      return this.http.post(url, payload, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    submitAllResultsForPromotion(payload) {\n      const url = `${this.baseUrl + routes.submitResultsForPromotion}`;\n      return this.http.post(url, payload, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    curateActualPromotion(payload) {\n      const url = `${this.baseUrl + routes.promoteAllStudents}`;\n      return this.http.post(url, payload, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    static #_ = (() => this.ɵfac = function PromotionService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || PromotionService)(i0.ɵɵinject(i1.HttpClient));\n    })();\n    static #_2 = (() => this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: PromotionService,\n      factory: PromotionService.ɵfac,\n      providedIn: 'root'\n    }))();\n  }\n  return PromotionService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}