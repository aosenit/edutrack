{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst routes = {\n  addstaff: 'schtrack-auth/api/v1/Staff/AddStaff',\n  getallstaff: 'schtrack-auth/api/v1/Staff/GetAllStaffInSchool',\n  getstaffbyid: 'schtrack-auth/api/v1/Staff/GetStaffById',\n  updatestaffbyid: 'schtrack-auth/api/v1/Staff/UpdateStaff',\n  deletestaff: 'schtrack-auth/api/v1/Staff/DeleteStaff',\n  staffSignature: 'schtrack-auth/api/v1/Staff/GetStaffNameAndSignatureByUserId',\n  getBulkDdownload: 'schtrack-auth/api/v1/Staff/GetStaffsExcelSheet',\n  bulkUpload: 'schtrack-auth/api/v1/Staff/BulkAddStaff'\n};\nexport let StaffService = /*#__PURE__*/(() => {\n  class StaffService {\n    constructor(http) {\n      this.http = http;\n      this.baseUrl = environment.serverUrl;\n      this.baseUrl2 = environment.demourl;\n    }\n    addStaff(form) {\n      // const tenantId = '1'; // just a temporary header till email services is ready\n      const {\n        EducationExperienceVMs,\n        WorkExperienceVMs\n      } = form;\n      const body = new FormData();\n      body.append('FirstName', form.FirstName);\n      body.append('LastName', form.LastName);\n      body.append('OtherNames', form.OtherNames);\n      body.append('DateOfBirth', form.DateOfBirth);\n      body.append('Sex', form.Sex);\n      body.append('MaritalStatus', form.MaritalStatus);\n      body.append('BloodGroup', form.BloodGroup);\n      body.append('Nationality', form.Nationality);\n      body.append('StateOfOrigin', form.StateOfOrigin);\n      body.append('LocalGovernment', form.LocalGovernment);\n      body.append('Religion', form.Religion);\n      body.append('IsActive', form.IsActive);\n      form.DocumentTypes.forEach(item => body.append('DocumentTypes', item));\n      body.append('EmploymentDetails.StaffType', form.StaffType);\n      body.append('EmploymentDetails.EmployementStatus', form.EmployementStatus);\n      body.append('EmploymentDetails.HighestQualification', form.HighestQualification);\n      body.append('EmploymentDetails.JobTitle', form.JobTitle);\n      body.append('EmploymentDetails.DepartmentId', form.DepartmentId);\n      body.append('EmploymentDetails.PayGrade', form.PayGrade);\n      body.append('EmploymentDetails.EmploymentDate', form.EmploymentDate);\n      body.append('EmploymentDetails.ResumptionDate', form.ResumptionDate);\n      body.append('ContactDetails.PhoneNumber', form.PhoneNumber);\n      body.append('ContactDetails.contactAltEmail', form.AltEmailAddress);\n      body.append('ContactDetails.AltEmailAddress', form.AltEmailAddress);\n      body.append('ContactDetails.AltPhoneNumber', form.AltPhoneNumber);\n      body.append('ContactDetails.EmailAddress', form.EmailAddress);\n      body.append('ContactDetails.Country', form.Country);\n      body.append('ContactDetails.Address', form.Address);\n      body.append('ContactDetails.State', form.State);\n      body.append('ContactDetails.Town', form.Town);\n      body.append('NextOfKin.NextKinAddress', form.NextKinAddress);\n      body.append('NextOfKin.NextKinTown', form.NextKinTown);\n      body.append('NextOfKin.NextKinCountry', form.NextKinCountry);\n      body.append('NextOfKin.NextKinFirstName', form.NextKinLastName);\n      body.append('NextOfKin.NextKinLastName', form.NextKinLastName);\n      body.append('NextOfKin.NextKinOccupation', form.NextKinOccupation);\n      body.append('NextOfKin.NextKinOtherName', form.NextKinOtherName);\n      body.append('NextOfKin.NextKinPhone', form.NextKinPhone);\n      body.append('NextOfKin.NextKinRelationship', form.NextKinRelationship);\n      body.append('NextOfKin.NextKinState', form.NextKinState);\n      body.append('Files', form.profile);\n      body.append('Files', form.signature);\n      for (let i = 0; i < WorkExperienceVMs.length; i++) {\n        body.append('WorkExperienceVMs[' + i + '].workRole', WorkExperienceVMs[i].workRole);\n        body.append('WorkExperienceVMs[' + i + '].workCompanyName', WorkExperienceVMs[i].workCompanyName);\n        body.append('WorkExperienceVMs[' + i + '].startTime', WorkExperienceVMs[i].startTime);\n        body.append('WorkExperienceVMs[' + i + '].endTime', WorkExperienceVMs[i].endTime);\n      }\n      for (let i = 0; i < EducationExperienceVMs.length; i++) {\n        body.append('EducationExperienceVMs[' + i + '].educationSchoolName', EducationExperienceVMs[i].educationSchoolName);\n        // tslint:disable-next-line:max-line-length\n        body.append('EducationExperienceVMs[' + i + '].educationSchoolQualification', EducationExperienceVMs[i].educationSchoolQualification);\n        body.append('EducationExperienceVMs[' + i + '].startDate', EducationExperienceVMs[i].startDate);\n        body.append('EducationExperienceVMs[' + i + '].endDate', EducationExperienceVMs[i].endDate);\n      }\n      const url = `${this.baseUrl + routes.addstaff}`;\n      // (body);\n      return this.http.post(url, body, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getAllStaffInSchool() {\n      // const tenantId = '1'; // just a temporary header till email services is ready\n      const url = `${this.baseUrl + routes.getallstaff}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getStaffById(id) {\n      // const tenantId = '1'; // just a temporary header till email services is ready\n      const url = `${this.baseUrl + routes.getstaffbyid}/${id}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    updateStaff(id, form) {\n      // const tenantId = '1'; // just a temporary header till email services is ready\n      if (form.profile !== null && form.signature !== null) {\n        const {\n          EducationExperienceVMs,\n          WorkExperienceVMs\n        } = form;\n        const body = new FormData();\n        body.append('FirstName', form.FirstName);\n        body.append('LastName', form.LastName);\n        body.append('OtherNames', form.OtherNames);\n        body.append('DateOfBirth', form.DateOfBirth);\n        body.append('Sex', form.Sex);\n        body.append('MaritalStatus', form.MaritalStatus);\n        body.append('BloodGroup', form.BloodGroup);\n        body.append('Nationality', form.Nationality);\n        body.append('StateOfOrigin', form.StateOfOrigin);\n        body.append('LocalGovernment', form.LocalGovernment);\n        body.append('Religion', form.Religion);\n        body.append('IsActive', form.IsActive);\n        form.DocumentTypes.forEach(item => body.append('DocumentTypes', item));\n        body.append('EmploymentDetails.StaffType', form.StaffType);\n        body.append('EmploymentDetails.EmployementStatus', form.EmployementStatus);\n        body.append('EmploymentDetails.HighestQualification', form.HighestQualification);\n        body.append('EmploymentDetails.JobTitle', form.JobTitle);\n        body.append('EmploymentDetails.DepartmentId', form.DepartmentId);\n        body.append('EmploymentDetails.PayGrade', form.PayGrade);\n        body.append('EmploymentDetails.EmploymentDate', form.EmploymentDate);\n        body.append('EmploymentDetails.ResumptionDate', form.ResumptionDate);\n        body.append('ContactDetails.PhoneNumber', form.PhoneNumber);\n        body.append('ContactDetails.contactAltEmail', form.AltEmailAddress);\n        body.append('ContactDetails.AltEmailAddress', form.AltEmailAddress);\n        body.append('ContactDetails.AltPhoneNumber', form.AltPhoneNumber);\n        body.append('ContactDetails.EmailAddress', form.EmailAddress);\n        body.append('ContactDetails.Country', form.Country);\n        body.append('ContactDetails.Address', form.Address);\n        body.append('ContactDetails.State', form.State);\n        body.append('ContactDetails.Town', form.Town);\n        body.append('NextOfKin.NextKinAddress', form.NextKinAddress);\n        body.append('NextOfKin.NextKinTown', form.NextKinTown);\n        body.append('NextOfKin.NextKinCountry', form.NextKinCountry);\n        body.append('NextOfKin.NextKinFirstName', form.NextKinLastName);\n        body.append('NextOfKin.NextKinLastName', form.NextKinLastName);\n        body.append('NextOfKin.NextKinOccupation', form.NextKinOccupation);\n        body.append('NextOfKin.NextKinOtherName', form.NextKinOtherName);\n        body.append('NextOfKin.NextKinPhone', form.NextKinPhone);\n        body.append('NextOfKin.NextKinRelationship', form.NextKinRelationship);\n        body.append('NextOfKin.NextKinState', form.NextKinState);\n        body.append('Files', form.profile);\n        body.append('Files', form.signature);\n        for (let i = 0; i < WorkExperienceVMs.length; i++) {\n          body.append('WorkExperienceVMs[' + i + '].workRole', WorkExperienceVMs[i].workRole);\n          body.append('WorkExperienceVMs[' + i + '].workCompanyName', WorkExperienceVMs[i].workCompanyName);\n          body.append('WorkExperienceVMs[' + i + '].startTime', WorkExperienceVMs[i].startTime);\n          body.append('WorkExperienceVMs[' + i + '].endTime', WorkExperienceVMs[i].endTime);\n        }\n        for (let i = 0; i < EducationExperienceVMs.length; i++) {\n          body.append('EducationExperienceVMs[' + i + '].educationSchoolName', EducationExperienceVMs[i].educationSchoolName);\n          // tslint:disable-next-line:max-line-length\n          body.append('EducationExperienceVMs[' + i + '].educationSchoolQualification', EducationExperienceVMs[i].educationSchoolQualification);\n          body.append('EducationExperienceVMs[' + i + '].startDate', EducationExperienceVMs[i].startDate);\n          body.append('EducationExperienceVMs[' + i + '].endDate', EducationExperienceVMs[i].endDate);\n        }\n        const url = `${this.baseUrl + routes.updatestaffbyid}/${id}`;\n        return this.http.put(url, body, {\n          headers: {\n            Authorization: 'Bearer ' + localStorage.getItem('access_token')\n          }\n        });\n      } else {\n        const {\n          EducationExperienceVMs,\n          WorkExperienceVMs\n        } = form;\n        const body = new FormData();\n        body.append('FirstName', form.FirstName);\n        body.append('LastName', form.LastName);\n        body.append('OtherNames', form.OtherNames);\n        body.append('DateOfBirth', form.DateOfBirth);\n        body.append('Sex', form.Sex);\n        body.append('MaritalStatus', form.MaritalStatus);\n        body.append('BloodGroup', form.BloodGroup);\n        body.append('Nationality', form.Nationality);\n        body.append('StateOfOrigin', form.StateOfOrigin);\n        body.append('LocalGovernment', form.LocalGovernment);\n        body.append('Religion', form.Religion);\n        body.append('IsActive', form.IsActive);\n        // form.DocumentTypes.forEach((item) => body.append('DocumentTypes', item));\n        body.append('EmploymentDetails.StaffType', form.StaffType);\n        body.append('EmploymentDetails.EmployementStatus', form.EmployementStatus);\n        body.append('EmploymentDetails.HighestQualification', form.HighestQualification);\n        body.append('EmploymentDetails.JobTitle', form.JobTitle);\n        body.append('EmploymentDetails.DepartmentId', form.DepartmentId);\n        body.append('EmploymentDetails.PayGrade', form.PayGrade);\n        body.append('EmploymentDetails.EmploymentDate', form.EmploymentDate);\n        body.append('EmploymentDetails.ResumptionDate', form.ResumptionDate);\n        body.append('ContactDetails.PhoneNumber', form.PhoneNumber);\n        body.append('ContactDetails.contactAltEmail', form.AltEmailAddress);\n        body.append('ContactDetails.AltEmailAddress', form.AltEmailAddress);\n        body.append('ContactDetails.AltPhoneNumber', form.AltPhoneNumber);\n        body.append('ContactDetails.EmailAddress', form.EmailAddress);\n        body.append('ContactDetails.Country', form.Country);\n        body.append('ContactDetails.Address', form.Address);\n        body.append('ContactDetails.State', form.State);\n        body.append('ContactDetails.Town', form.Town);\n        body.append('NextOfKin.NextKinAddress', form.NextKinAddress);\n        body.append('NextOfKin.NextKinTown', form.NextKinTown);\n        body.append('NextOfKin.NextKinCountry', form.NextKinCountry);\n        body.append('NextOfKin.NextKinFirstName', form.NextKinLastName);\n        body.append('NextOfKin.NextKinLastName', form.NextKinLastName);\n        body.append('NextOfKin.NextKinOccupation', form.NextKinOccupation);\n        body.append('NextOfKin.NextKinOtherName', form.NextKinOtherName);\n        body.append('NextOfKin.NextKinPhone', form.NextKinPhone);\n        body.append('NextOfKin.NextKinRelationship', form.NextKinRelationship);\n        body.append('NextOfKin.NextKinState', form.NextKinState);\n        // body.append('Files', form.profile);\n        // body.append('Files', form.signature);\n        for (let i = 0; i < WorkExperienceVMs.length; i++) {\n          body.append('WorkExperienceVMs[' + i + '].workRole', WorkExperienceVMs[i].workRole);\n          body.append('WorkExperienceVMs[' + i + '].workCompanyName', WorkExperienceVMs[i].workCompanyName);\n          body.append('WorkExperienceVMs[' + i + '].startTime', WorkExperienceVMs[i].startTime);\n          body.append('WorkExperienceVMs[' + i + '].endTime', WorkExperienceVMs[i].endTime);\n        }\n        for (let i = 0; i < EducationExperienceVMs.length; i++) {\n          body.append('EducationExperienceVMs[' + i + '].educationSchoolName', EducationExperienceVMs[i].educationSchoolName);\n          // tslint:disable-next-line:max-line-length\n          body.append('EducationExperienceVMs[' + i + '].educationSchoolQualification', EducationExperienceVMs[i].educationSchoolQualification);\n          body.append('EducationExperienceVMs[' + i + '].startDate', EducationExperienceVMs[i].startDate);\n          body.append('EducationExperienceVMs[' + i + '].endDate', EducationExperienceVMs[i].endDate);\n        }\n        const url = `${this.baseUrl + routes.updatestaffbyid}/${id}`;\n        return this.http.put(url, body, {\n          headers: {\n            Authorization: 'Bearer ' + localStorage.getItem('access_token')\n          }\n        });\n      }\n    }\n    deleteStaffById(id) {\n      // const tenantId = '1'; // just a temporary header till email services is ready\n      const url = `${this.baseUrl + routes.deletestaff}/${id}`;\n      return this.http.delete(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getStaffSignature(userId) {\n      const url = `${this.baseUrl + routes.staffSignature}/${userId}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    downloadSampleBulkSheet() {\n      const url = `${this.baseUrl + routes.getBulkDdownload}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    uploadBulkDocument(payload) {\n      const body = new FormData();\n      body.append('File', payload.Document);\n      const url = `${this.baseUrl + routes.bulkUpload}`;\n      return this.http.post(url, body, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    static #_ = (() => this.ɵfac = function StaffService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || StaffService)(i0.ɵɵinject(i1.HttpClient));\n    })();\n    static #_2 = (() => this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: StaffService,\n      factory: StaffService.ɵfac,\n      providedIn: 'root'\n    }))();\n  }\n  return StaffService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}