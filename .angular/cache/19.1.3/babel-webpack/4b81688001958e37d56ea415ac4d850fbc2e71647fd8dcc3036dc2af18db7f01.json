{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst routes = {\n  getstudentandassessment: 'schtrack-assessment/api/v1/Result/GetResultUploadFormData',\n  generateReport: 'schtrack-assessment/api/v1/Result/GetResultUploadFormData',\n  generateExcel: 'schtrack-assessment/api/v1/Result/GetResultUploadExcel',\n  uploadexcelresult: 'schtrack-assessment/api/v1/Result/PostResultFromExcel',\n  uploadResultFromForm: 'schtrack-assessment/api/v1/Result/UploadAssessmentSetups',\n  getclassbroadsheet: 'schtrack-assessment/api/v1/Result/GetClassBroadSheet',\n  getstudentbroadsheet: 'schtrack-assessment/api/v1/Result/GetStudentBroadSheet',\n  getstudentResultFromTeacher: 'schtrack-assessment/api/v1/Result/GetClassBroadSheetApprovedByClassTeacher',\n  createstudentbehaviour: 'schtrack-assessment/api/v1/Result/PostBehaviourResult',\n  viewstudentbehaviour: 'schtrack-assessment/api/v1/Result/GetBehaviourResult',\n  getapprovedResult: 'schtrack-assessment/api/v1/Result/GetApprovedStudentReportSheet',\n  getapprovedStudentResult: 'schtrack-assessment/api/v1/Result/GetStudentsWithApprovedResult',\n  mailreportsheet: 'schtrack-assessment/api/v1/Result/PostMailResult',\n  exportBroadSheetExcel: 'schtrack-assessment/api/v1/Result/ExportBroadSheetExcel',\n  exportBroadSheetPdf: 'schtrack-assessment/api/v1/Result/ExportBroadSheetPDF',\n  viewAllClassApprovalStatus: 'schtrack-assessment/api/v1/Result/GetClassesResultApproval'\n};\nexport let ResultService = /*#__PURE__*/(() => {\n  class ResultService {\n    constructor(http) {\n      this.http = http;\n      this.baseUrl = environment.serverUrl;\n      this.baseUrl2 = environment.demourl;\n    }\n    getStudentandAssement(id) {\n      const url = `${this.baseUrl + routes.getstudentandassessment}?classId=${id}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    generateReport(classId, className) {\n      const url = `${this.baseUrl + routes.generateReport}?classId=${classId}&className=${className}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    generateExcel(classId, className) {\n      const url = `${this.baseUrl + routes.generateExcel}?classId=${classId}&?className=${className}`;\n      // tslint:disable-next-line:max-line-length\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    UploadExcelResult(excelDataForm) {\n      const body = new FormData();\n      body.append('SchoolClassId', excelDataForm.SchoolClassId);\n      body.append('SubjectId', excelDataForm.SubjectId);\n      body.append('ExcelFile', excelDataForm.ExcelFile);\n      const url = `${this.baseUrl + routes.uploadexcelresult}`;\n      // tslint:disable-next-line:max-line-length\n      return this.http.post(url, body, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    UploadAssessmentSetup(result) {\n      const url = `${this.baseUrl + routes.uploadResultFromForm}`;\n      // tslint:disable-next-line:max-line-length\n      return this.http.post(url, result, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getClassBroadSheet(id) {\n      const url = `${this.baseUrl + routes.getclassbroadsheet}/${id}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getStudentBroadSheet(studId, classId) {\n      const url = `${this.baseUrl + routes.getstudentbroadsheet}?studId=${studId}&classId=${classId}`;\n      // tslint:disable-next-line:max-line-length\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getStudentBroadSheetApprovedByTEacher(classId) {\n      const url = `${this.baseUrl + routes.getstudentResultFromTeacher}/${classId}`;\n      // tslint:disable-next-line:max-line-length\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    createStudentBehaviour(behaviourData) {\n      const url = `${this.baseUrl + routes.createstudentbehaviour}`;\n      // tslint:disable-next-line:max-line-length\n      return this.http.post(url, behaviourData, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getStudentBehviour(SessionId, TermSequence, ClassId, StudentId) {\n      // tslint:disable-next-line:max-line-length\n      const url = `${this.baseUrl + routes.viewstudentbehaviour}?SessionId=${SessionId}&TermSequence=${TermSequence}&ClassId=${ClassId}&StudentId=${StudentId}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getBehaviourForStudent(SessionId, TermSequence, ClassId, studUserId) {\n      // tslint:disable-next-line:max-line-length\n      const url = `${this.baseUrl + routes.viewstudentbehaviour}?SessionId=${SessionId}&TermSequence=${TermSequence}&ClassId=${ClassId}&studUserId=${studUserId}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getApprovedStudentResult(studId, classId, sessionId, termSequenceNumber) {\n      // tslint:disable-next-line:max-line-length\n      const url = `${this.baseUrl + routes.getapprovedResult}?studId=${studId}&classId=${classId}&sessionId=${sessionId}&termSequenceNumber=${termSequenceNumber}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getApprovedResultForStudent(studUserId, classId, sessionId, termSequenceNumber) {\n      // tslint:disable-next-line:max-line-length\n      const url = `${this.baseUrl + routes.getapprovedResult}?studUserId=${studUserId}&classId=${classId}&sessionId=${sessionId}&termSequenceNumber=${termSequenceNumber}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getStudentApprovedResults(classId, sessionId, termSequenceNumber) {\n      // tslint:disable-next-line:max-line-length\n      const url = `${this.baseUrl + routes.getapprovedStudentResult}?classId=${classId}&sessionId=${sessionId}&termSequenceNumber=${termSequenceNumber}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    mailReportSheetToParent(mailData) {\n      const url = `${this.baseUrl + routes.mailreportsheet}`;\n      return this.http.post(url, mailData, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    GetAllClassResultApprovalStatus(curSessionId, termSequenceNumber) {\n      const url = `${this.baseUrl + routes.viewAllClassApprovalStatus}?curSessionId=${curSessionId}&termSequenceNumber=${termSequenceNumber}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    exportBroadsheetExcel(id) {\n      const url = `${this.baseUrl + routes.exportBroadSheetExcel}?id=${id}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    exportBroadsheetPdf(id) {\n      const url = `${this.baseUrl + routes.exportBroadSheetPdf}?id=${id}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    static #_ = (() => this.ɵfac = function ResultService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || ResultService)(i0.ɵɵinject(i1.HttpClient));\n    })();\n    static #_2 = (() => this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ResultService,\n      factory: ResultService.ɵfac,\n      providedIn: 'root'\n    }))();\n  }\n  return ResultService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}