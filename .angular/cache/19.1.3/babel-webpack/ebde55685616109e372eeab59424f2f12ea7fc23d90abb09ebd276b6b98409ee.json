{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst routes = {\n  addteacher: 'schtrack-auth/api/v1/Teacher/AddTeacher',\n  getallteacher: 'schtrack-auth/api/v1/Teacher/GetTeachers',\n  getteacherbyid: 'schtrack-auth/api/v1/Teacher/GetTeachers',\n  updateteacherbyid: 'schtrack-auth/api/v1/Teacher/UpdateTeacher',\n  deleteteacher: 'schtrack-auth/api/v1/Teacher/DeleteTeacher',\n  attachteachertoclass: 'schtrack-auth/api/v1/Teacher/SetClassTeacher',\n  getTeacherDetailsByUserId: 'schtrack-auth/api/v1/Teacher/GetTeacherDetailsByUserId',\n  getClassTeacher: 'schtrack-auth/api/v1/Teacher/GetTeacherClass',\n  getBulkDdownload: 'schtrack-auth/api/v1/Teacher/GetTeachersExcelSheet',\n  bulkUpload: 'schtrack-auth/api/v1/Teacher/BulkAddTeacher',\n  getAllassignmentSubmission: 'schtrack-learning/api/v1/AssignmentAnswer/GetAllAssignmentAnswers',\n  attachteachertosubject: 'schtrack-learning/api/v1/TeacherClassSubject/AddClassSubjectsToTeacher',\n  removeteacherfromsubject: 'schtrack-learning/api/v1/TeacherClassSubject/RemoveTeacherToCLassSubject',\n  getteacherdesignation: 'schtrack-learning/api/v1/TeacherClassSubject/GetAllClassSubjectsForTeacher',\n  getsubjectAttendance: 'schtrack-learning/api/v1/Attendance/GetStudentAttendanceForSubject',\n  getclassAttendance: 'schtrack-learning/api/v1/Attendance/GetStudentAttendanceForClass',\n  downloadEmployeesData: 'schtrack-auth/api/v1/Teacher/GetTeachersDataInExcel',\n  downloadEmployeesDataInPdf: 'schtrack-auth/api/v1/Teacher/GetTeachersDataInPDF'\n};\nexport let TeacherService = /*#__PURE__*/(() => {\n  class TeacherService {\n    constructor(http) {\n      this.http = http;\n      this.baseUrl = environment.serverUrl;\n      this.baseUrl2 = environment.demourl;\n    }\n    addTeacher(form) {\n      // const tenantId = '1'; // just a temporary header till email services is ready\n      const {\n        EducationExperienceVMs,\n        WorkExperienceVMs\n      } = form;\n      const body = new FormData();\n      body.append('FirstName', form.FirstName);\n      body.append('LastName', form.LastName);\n      body.append('OtherNames', form.OtherNames);\n      body.append('DateOfBirth', form.DateOfBirth);\n      body.append('Sex', form.Sex);\n      body.append('MaritalStatus', form.MaritalStatus);\n      body.append('BloodGroup', form.BloodGroup);\n      body.append('Nationality', form.Nationality);\n      body.append('StateOfOrigin', form.StateOfOrigin);\n      body.append('LocalGovernment', form.LocalGovernment);\n      body.append('Religion', form.Religion);\n      body.append('IsActive', form.IsActive);\n      form.DocumentTypes.forEach(item => body.append('DocumentTypes', item));\n      body.append('EmploymentDetails.StaffType', form.StaffType);\n      body.append('EmploymentDetails.EmployementStatus', form.EmployementStatus);\n      body.append('EmploymentDetails.HighestQualification', form.HighestQualification);\n      body.append('EmploymentDetails.JobTitle', form.JobTitle);\n      body.append('EmploymentDetails.DepartmentId', form.DepartmentId);\n      body.append('EmploymentDetails.PayGrade', form.PayGrade);\n      body.append('EmploymentDetails.EmploymentDate', form.EmploymentDate);\n      body.append('EmploymentDetails.ResumptionDate', form.ResumptionDate);\n      body.append('ContactDetails.PhoneNumber', form.PhoneNumber);\n      body.append('ContactDetails.contactAltEmail', form.AltEmailAddress);\n      body.append('ContactDetails.AltEmailAddress', form.AltEmailAddress);\n      body.append('ContactDetails.AltPhoneNumber', form.AltPhoneNumber);\n      body.append('ContactDetails.EmailAddress', form.EmailAddress);\n      body.append('ContactDetails.Country', form.Country);\n      body.append('ContactDetails.Address', form.Address);\n      body.append('ContactDetails.State', form.State);\n      body.append('ContactDetails.Town', form.Town);\n      body.append('NextOfKin.NextKinAddress', form.NextKinAddress);\n      body.append('NextOfKin.NextKinTown', form.NextKinTown);\n      body.append('NextOfKin.NextKinCountry', form.NextKinCountry);\n      body.append('NextOfKin.NextKinFirstName', form.NextKinLastName);\n      body.append('NextOfKin.NextKinLastName', form.NextKinLastName);\n      body.append('NextOfKin.NextKinOccupation', form.NextKinOccupation);\n      body.append('NextOfKin.NextKinOtherName', form.NextKinOtherName);\n      body.append('NextOfKin.NextKinPhone', form.NextKinPhone);\n      body.append('NextOfKin.NextKinRelationship', form.NextKinRelationship);\n      body.append('NextOfKin.NextKinState', form.NextKinState);\n      body.append('Files', form.profile);\n      body.append('Files', form.signature);\n      for (let i = 0; i < WorkExperienceVMs.length; i++) {\n        body.append('WorkExperienceVMs[' + i + '].workRole', WorkExperienceVMs[i].workRole);\n        body.append('WorkExperienceVMs[' + i + '].workCompanyName', WorkExperienceVMs[i].workCompanyName);\n        body.append('WorkExperienceVMs[' + i + '].startTime', WorkExperienceVMs[i].startTime);\n        body.append('WorkExperienceVMs[' + i + '].endTime', WorkExperienceVMs[i].endTime);\n      }\n      for (let i = 0; i < EducationExperienceVMs.length; i++) {\n        body.append('EducationExperienceVMs[' + i + '].educationSchoolName', EducationExperienceVMs[i].educationSchoolName);\n        // tslint:disable-next-line:max-line-length\n        body.append('EducationExperienceVMs[' + i + '].educationSchoolQualification', EducationExperienceVMs[i].educationSchoolQualification);\n        body.append('EducationExperienceVMs[' + i + '].startDate', EducationExperienceVMs[i].startDate);\n        body.append('EducationExperienceVMs[' + i + '].endDate', EducationExperienceVMs[i].endDate);\n      }\n      const url = `${this.baseUrl + routes.addteacher}`;\n      return this.http.post(url, body, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getAllTeachers() {\n      // const tenantId = '1'; // just a temporary header till email services is ready\n      const url = `${this.baseUrl + routes.getallteacher}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getTeacherById(id) {\n      // const tenantId = '1'; // just a temporary header till email services is ready\n      const url = `${this.baseUrl + routes.getteacherbyid}/${id}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    updateTeacher(userid, form) {\n      // (form);\n      if (form.profile !== null && form.signature !== null) {\n        const {\n          EducationExperienceVMs,\n          WorkExperienceVMs\n        } = form;\n        const body = new FormData();\n        body.append('FirstName', form.FirstName);\n        body.append('LastName', form.LastName);\n        body.append('OtherNames', form.OtherNames);\n        body.append('DateOfBirth', form.DateOfBirth);\n        body.append('Sex', form.Sex);\n        body.append('MaritalStatus', form.MaritalStatus);\n        body.append('BloodGroup', form.BloodGroup);\n        body.append('Nationality', form.Nationality);\n        body.append('StateOfOrigin', form.StateOfOrigin);\n        body.append('LocalGovernment', form.LocalGovernment);\n        body.append('Religion', form.Religion);\n        body.append('IsActive', form.IsActive);\n        form.DocumentTypes.forEach(item => body.append('DocumentTypes', item));\n        body.append('EmploymentDetails.StaffType', form.StaffType);\n        body.append('EmploymentDetails.EmployementStatus', form.EmployementStatus);\n        body.append('EmploymentDetails.HighestQualification', form.HighestQualification);\n        body.append('EmploymentDetails.JobTitle', form.JobTitle);\n        body.append('EmploymentDetails.DepartmentId', form.DepartmentId);\n        body.append('EmploymentDetails.PayGrade', form.PayGrade);\n        body.append('EmploymentDetails.EmploymentDate', form.EmploymentDate);\n        body.append('EmploymentDetails.ResumptionDate', form.ResumptionDate);\n        body.append('ContactDetails.PhoneNumber', form.PhoneNumber);\n        body.append('ContactDetails.contactAltEmail', form.AltEmailAddress);\n        body.append('ContactDetails.AltEmailAddress', form.AltEmailAddress);\n        body.append('ContactDetails.AltPhoneNumber', form.AltPhoneNumber);\n        body.append('ContactDetails.EmailAddress', form.EmailAddress);\n        body.append('ContactDetails.Country', form.Country);\n        body.append('ContactDetails.Address', form.Address);\n        body.append('ContactDetails.State', form.State);\n        body.append('ContactDetails.Town', form.Town);\n        body.append('NextOfKin.NextKinAddress', form.NextKinAddress);\n        body.append('NextOfKin.NextKinTown', form.NextKinTown);\n        body.append('NextOfKin.NextKinCountry', form.NextKinCountry);\n        body.append('NextOfKin.NextKinFirstName', form.NextKinLastName);\n        body.append('NextOfKin.NextKinLastName', form.NextKinLastName);\n        body.append('NextOfKin.NextKinOccupation', form.NextKinOccupation);\n        body.append('NextOfKin.NextKinOtherName', form.NextKinOtherName);\n        body.append('NextOfKin.NextKinPhone', form.NextKinPhone);\n        body.append('NextOfKin.NextKinRelationship', form.NextKinRelationship);\n        body.append('NextOfKin.NextKinState', form.NextKinState);\n        body.append('Files', form.profile);\n        body.append('Files', form.signature);\n        for (let i = 0; i < WorkExperienceVMs.length; i++) {\n          body.append('WorkExperienceVMs[' + i + '].workRole', WorkExperienceVMs[i].workRole);\n          body.append('WorkExperienceVMs[' + i + '].workCompanyName', WorkExperienceVMs[i].workCompanyName);\n          body.append('WorkExperienceVMs[' + i + '].startTime', WorkExperienceVMs[i].startTime);\n          body.append('WorkExperienceVMs[' + i + '].endTime', WorkExperienceVMs[i].endTime);\n        }\n        for (let i = 0; i < EducationExperienceVMs.length; i++) {\n          body.append('EducationExperienceVMs[' + i + '].educationSchoolName', EducationExperienceVMs[i].educationSchoolName);\n          // tslint:disable-next-line:max-line-length\n          body.append('EducationExperienceVMs[' + i + '].educationSchoolQualification', EducationExperienceVMs[i].educationSchoolQualification);\n          body.append('EducationExperienceVMs[' + i + '].startDate', EducationExperienceVMs[i].startDate);\n          body.append('EducationExperienceVMs[' + i + '].endDate', EducationExperienceVMs[i].endDate);\n        }\n        const url = `${this.baseUrl + routes.updateteacherbyid}/${userid}`;\n        return this.http.put(url, body, {\n          headers: {\n            Authorization: 'Bearer ' + localStorage.getItem('access_token')\n          }\n        });\n      } else {\n        const {\n          EducationExperienceVMs,\n          WorkExperienceVMs\n        } = form;\n        const body = new FormData();\n        body.append('FirstName', form.FirstName);\n        body.append('LastName', form.LastName);\n        body.append('OtherNames', form.OtherNames);\n        body.append('DateOfBirth', form.DateOfBirth);\n        body.append('Sex', form.Sex);\n        body.append('MaritalStatus', form.MaritalStatus);\n        body.append('BloodGroup', form.BloodGroup);\n        body.append('Nationality', form.Nationality);\n        body.append('StateOfOrigin', form.StateOfOrigin);\n        body.append('LocalGovernment', form.LocalGovernment);\n        body.append('Religion', form.Religion);\n        body.append('IsActive', form.IsActive);\n        // form.DocumentTypes.forEach((item) => body.append('DocumentTypes', item));\n        body.append('EmploymentDetails.StaffType', form.StaffType);\n        body.append('EmploymentDetails.EmployementStatus', form.EmployementStatus);\n        body.append('EmploymentDetails.HighestQualification', form.HighestQualification);\n        body.append('EmploymentDetails.JobTitle', form.JobTitle);\n        body.append('EmploymentDetails.DepartmentId', form.DepartmentId);\n        body.append('EmploymentDetails.PayGrade', form.PayGrade);\n        body.append('EmploymentDetails.EmploymentDate', form.EmploymentDate);\n        body.append('EmploymentDetails.ResumptionDate', form.ResumptionDate);\n        body.append('ContactDetails.PhoneNumber', form.PhoneNumber);\n        body.append('ContactDetails.contactAltEmail', form.AltEmailAddress);\n        body.append('ContactDetails.AltEmailAddress', form.AltEmailAddress);\n        body.append('ContactDetails.AltPhoneNumber', form.AltPhoneNumber);\n        body.append('ContactDetails.EmailAddress', form.EmailAddress);\n        body.append('ContactDetails.Country', form.Country);\n        body.append('ContactDetails.Address', form.Address);\n        body.append('ContactDetails.State', form.State);\n        body.append('ContactDetails.Town', form.Town);\n        body.append('NextOfKin.NextKinAddress', form.NextKinAddress);\n        body.append('NextOfKin.NextKinTown', form.NextKinTown);\n        body.append('NextOfKin.NextKinCountry', form.NextKinCountry);\n        body.append('NextOfKin.NextKinFirstName', form.NextKinLastName);\n        body.append('NextOfKin.NextKinLastName', form.NextKinLastName);\n        body.append('NextOfKin.NextKinOccupation', form.NextKinOccupation);\n        body.append('NextOfKin.NextKinOtherName', form.NextKinOtherName);\n        body.append('NextOfKin.NextKinPhone', form.NextKinPhone);\n        body.append('NextOfKin.NextKinRelationship', form.NextKinRelationship);\n        body.append('NextOfKin.NextKinState', form.NextKinState);\n        // body.append('Files', form.profile);\n        // body.append('Files', form.signature);\n        for (let i = 0; i < WorkExperienceVMs.length; i++) {\n          body.append('WorkExperienceVMs[' + i + '].workRole', WorkExperienceVMs[i].workRole);\n          body.append('WorkExperienceVMs[' + i + '].workCompanyName', WorkExperienceVMs[i].workCompanyName);\n          body.append('WorkExperienceVMs[' + i + '].startTime', WorkExperienceVMs[i].startTime);\n          body.append('WorkExperienceVMs[' + i + '].endTime', WorkExperienceVMs[i].endTime);\n        }\n        for (let i = 0; i < EducationExperienceVMs.length; i++) {\n          body.append('EducationExperienceVMs[' + i + '].educationSchoolName', EducationExperienceVMs[i].educationSchoolName);\n          // tslint:disable-next-line:max-line-length\n          body.append('EducationExperienceVMs[' + i + '].educationSchoolQualification', EducationExperienceVMs[i].educationSchoolQualification);\n          body.append('EducationExperienceVMs[' + i + '].startDate', EducationExperienceVMs[i].startDate);\n          body.append('EducationExperienceVMs[' + i + '].endDate', EducationExperienceVMs[i].endDate);\n        }\n        const url = `${this.baseUrl + routes.updateteacherbyid}/${userid}`;\n        return this.http.put(url, body, {\n          headers: {\n            Authorization: 'Bearer ' + localStorage.getItem('access_token')\n          }\n        });\n      }\n    }\n    deleteTeacherById(userid) {\n      // const tenantId = '1'; // just a temporary header till email services is ready\n      const url = `${this.baseUrl + '/givenApi'}/${userid}`;\n      return this.http.delete(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    // learning service for teacher realted stuff goes down here\n    attachTeacherToSubject(result) {\n      // const tenantId = '1'; // just a temporary header till email services is ready\n      // const body = new FormData();\n      // body.append('TeacherId', result.TeacherId);\n      // body.append('ClassSubjectIds', result.ClassSubjectIds);\n      const url = `${this.baseUrl + routes.attachteachertosubject}`;\n      return this.http.post(url, result, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    removeTeacherFromSubject(id) {\n      // const tenantId = '1'; // just a temporary header till email services is ready\n      // const body = new FormData();\n      // body.append('TeacherId', result.TeacherId);\n      // body.append('ClassSubjectIds', result.ClassSubjectIds);\n      const url = `${this.baseUrl + routes.removeteacherfromsubject}?id=${id}`;\n      return this.http.delete(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getAttachedSubjects(id) {\n      // const tenantId = '1'; // just a temporary header till email services is ready\n      const url = `${this.baseUrl + routes.getteacherdesignation}?teacherid=${id}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getAllAssignmentSubmissionForASubject(id) {\n      // const tenantId = '1'; // just a temporary header till email services is ready\n      const url = `${this.baseUrl + routes.getAllassignmentSubmission}?assignmentId=${id}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    attachTeacherToClass(result) {\n      const url = `${this.baseUrl + routes.attachteachertoclass}`;\n      return this.http.put(url, result, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getTeacherAttachedToClass(id) {\n      const url = `${this.baseUrl + routes.getClassTeacher}/${id}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getTeacherDetailsByUserId(id) {\n      const url = `${this.baseUrl + routes.getTeacherDetailsByUserId}/${id}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getClassAttendance(ClassId) {\n      const url = `${this.baseUrl + routes.getclassAttendance}?ClassId=${ClassId}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getSubjectAttendance(SubjectId) {\n      const url = `${this.baseUrl + routes.getsubjectAttendance}?SubjectId=${SubjectId}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    downloadSampleBulkSheet() {\n      const url = `${this.baseUrl + routes.getBulkDdownload}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    uploadBulkDocument(payload) {\n      const body = new FormData();\n      body.append('File', payload.Document);\n      const url = `${this.baseUrl + routes.bulkUpload}`;\n      return this.http.post(url, body, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    exportEmployeeExcelFile(staff) {\n      const url = `${this.baseUrl + routes.downloadEmployeesData}?Staff=${staff}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    exportEmployeePdfFile(staff) {\n      const url = `${this.baseUrl + routes.downloadEmployeesDataInPdf}?Staff=${staff}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    static #_ = (() => this.ɵfac = function TeacherService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || TeacherService)(i0.ɵɵinject(i1.HttpClient));\n    })();\n    static #_2 = (() => this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TeacherService,\n      factory: TeacherService.ɵfac,\n      providedIn: 'root'\n    }))();\n  }\n  return TeacherService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}