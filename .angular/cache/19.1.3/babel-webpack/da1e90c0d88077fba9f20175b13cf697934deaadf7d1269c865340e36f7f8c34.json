{"ast":null,"code":"import { HttpResponse } from \"@angular/common/http\";\nimport { throwError } from \"rxjs\";\nimport { catchError, tap } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/services/classes/loader/loader.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"src/services/classes/notifications/notifications.service\";\nexport let HttpErrorInterceptor = /*#__PURE__*/(() => {\n  class HttpErrorInterceptor {\n    constructor(loaderService, router, notification) {\n      this.loaderService = loaderService;\n      this.router = router;\n      this.notification = notification;\n    }\n    intercept(request, next) {\n      this.loaderService.show();\n      return next.handle(request).pipe(tap(evt => {\n        // custom api errors\n        if (evt instanceof HttpResponse) {\n          this.loaderService.hide();\n          // if (evt.body.code != 1 && !evt.body.token_type) {\n          //     this.errorMessage = evt.body.errors[0] || evt.body.payload[0];\n          //     this.notification.publishMessages(this.errorMessage, 'danger', 1)\n          // }\n        }\n      }), catchError(error => {\n        this.loaderService.hide();\n        if (error.status === 401) {\n          this.notification.publishMessages('Your Session has expired. Please Login', 'danger', 1);\n          this.router.navigateByUrl('/');\n        }\n        if (error.error instanceof ErrorEvent) {\n          //client-side error\n          this.errorMessage = `Error: ${error.error.message}`;\n        } else {\n          // server-side error\n          switch (error.status) {\n            case 503:\n              {\n                this.errorMessage = 'An Internal Error Occured. Our Engineers Have Been Contacted';\n                this.notification.publishMessages(this.errorMessage, 'danger', 1);\n                break;\n              }\n            case 500:\n              {\n                this.errorMessage = 'An Internal Error Occured. Our Engineers Have Been Contacted';\n                this.notification.publishMessages(this.errorMessage, 'danger', 1);\n                break;\n              }\n            case 400:\n              {\n                this.errorMessage = 'An Error Occured While Processing Your Request. Please Try Again';\n                if (error.error.error == \"invalid_grant\" || \"access_denied\") {\n                  this.notification.publishMessages(error.error['errorDescription'], 'danger', 1);\n                } else {\n                  this.notification.publishMessages(this.errorMessage, 'danger', 1);\n                }\n                break;\n              }\n            case 404:\n              {\n                this.errorMessage = 'An Error Occured While Processing Your Request. Please Try Again';\n                this.notification.publishMessages(this.errorMessage, 'danger', 1);\n                break;\n              }\n            case 405:\n              {\n                this.errorMessage = 'An Error Occured While Processing Your Request. Please Try Again';\n                this.notification.publishMessages(this.errorMessage, 'danger', 1);\n                break;\n              }\n            case 0:\n              {\n                this.errorMessage = 'A Connection Error Occured. Please Check Your Network Connection';\n                this.notification.publishMessages(this.errorMessage, 'danger', 1);\n                break;\n              }\n          }\n        }\n        if (error.status === 503 || error.status === 0) {\n          return throwError(this.errorMessage);\n        }\n      }));\n    }\n    static #_ = (() => this.ɵfac = function HttpErrorInterceptor_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || HttpErrorInterceptor)(i0.ɵɵinject(i1.LoaderService), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.NotificationsService));\n    })();\n    static #_2 = (() => this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: HttpErrorInterceptor,\n      factory: HttpErrorInterceptor.ɵfac\n    }))();\n  }\n  return HttpErrorInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}