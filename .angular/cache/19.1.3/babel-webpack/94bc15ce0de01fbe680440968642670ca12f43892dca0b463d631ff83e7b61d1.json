{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst routes = {\n  login: 'schtrack-auth/api/v1/Authentication/Token',\n  forgotPassword: 'schtrack-auth/api/v1/Authentication/RequestPasswordReset',\n  verifyEmail: 'schtrack-auth/api/v1/Authentication/ConfirmEmail',\n  passwordReset: 'schtrack-auth/api/v1/Authentication/PasswordReset'\n};\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http) {\n      this.http = http;\n      this.baseUrl = environment.serverUrl;\n    }\n    loginAdmin(LoginForm) {\n      // const headers = new HttpHeaders({ 'Access-Control-Allow-Origin': '*'});\n      const url = `${this.baseUrl + routes.login}`;\n      const {\n        username,\n        password\n      } = LoginForm; // destructure the login object\n      const body = new HttpParams().set('grant_type', 'password').set('username', username).set('password', password);\n      return this.http.post(url, body, {\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        }\n      });\n    }\n    resetPassword(resetPasswordForm) {\n      const body = new FormData();\n      body.append('username', resetPasswordForm.username);\n      const url = `${this.baseUrl + routes.forgotPassword}`;\n      return this.http.post(url, body);\n    }\n    verifyUserEmail(userId, code) {\n      const url = `${this.baseUrl + routes.verifyEmail}?userId=${userId}&code=${code}`;\n      return this.http.get(url);\n    }\n    requestPasswordReset(passwordRequestForm) {\n      const url = `${this.baseUrl + routes.passwordReset}`;\n      return this.http.post(url, passwordRequestForm);\n    }\n    static #_ = (() => this.ɵfac = function AuthService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    })();\n    static #_2 = (() => this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    }))();\n  }\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}