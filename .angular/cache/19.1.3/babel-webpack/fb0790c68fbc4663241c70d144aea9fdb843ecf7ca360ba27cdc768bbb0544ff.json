{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst routes = {\n  addBankAccount: 'schtrack-finance/api/v1/BankAccount/NewBankAccount',\n  getbankAccount: 'schtrack-finance/api/v1/BankAccount/GetBankAccounts',\n  getbankAccountwithId: 'schtrack-finance/api/v1/BankAccount/GetBankAccount',\n  udatebankAccountwithId: 'schtrack-finance/api/v1/BankAccount/UpdateBankAccount',\n  addAccountclass: 'schtrack-finance/api/v1/AccountClass/NewAccountClass',\n  getAccountclass: 'schtrack-finance/api/v1/AccountClass/GetAccountClasses',\n  getAccountclassByid: 'schtrack-finance/api/v1/AccountClass/GetAccountClass',\n  editAccountclassByid: 'schtrack-finance/api/v1/AccountClass/UpdateAccountClass',\n  addAccounttype: 'schtrack-finance/api/v1/AccountType/NewAccountType',\n  getAccountTypes: 'schtrack-finance/api/v1/AccountType/GetAccountTypes',\n  getAccountTypewithId: 'schtrack-finance/api/v1/AccountType/GetAccountType',\n  getAccountTypesbyId: 'schtrack-finance/api/v1/AccountType/GetAccountTypes',\n  editAccountTypesbyId: 'schtrack-finance/api/v1/AccountType/UpdateAccountType',\n  viewAccounttypesbyClass: 'schtrack-finance/api/v1/AccountType/GetAccountTypes',\n  createAccount: 'schtrack-finance/api/v1/Account/NewAccount',\n  getChartAccount: 'schtrack-finance/api/v1/Account/GetAccounts',\n  getChartAccountWithId: 'schtrack-finance/api/v1/Account/GetAccount',\n  editChartAccount: 'schtrack-finance/api/v1/Account/UpdateAccount',\n  addfeeGruop: 'schtrack-finance/api/v1/FeeGroup/NewFeeGroup',\n  getallfeeGruop: 'schtrack-finance/api/v1/FeeGroup/GetFeeGroups',\n  getfeeGruopById: 'schtrack-finance/api/v1/FeeGroup/GetFeeGroup',\n  updatefeeGruopById: 'schtrack-finance/api/v1/FeeGroup/UpdateFeeGroup',\n  createComponent: 'schtrack-finance/api/v1/Component/NewComponent',\n  fetchComponent: 'schtrack-finance/api/v1/Component/GetComponents',\n  fetchComponentwithId: 'schtrack-finance/api/v1/Component/GetComponent',\n  editComponent: 'schtrack-finance/api/v1/Component/UpdateComponent',\n  addNewFee: 'schtrack-finance/api/v1/Fee/NewFee',\n  viewAllfee: 'schtrack-finance/api/v1/Fee/GetFees',\n  viewfeeById: 'schtrack-finance/api/v1/Fee/GetFee',\n  editfeeById: 'schtrack-finance/api/v1/Fee/UpdateFee',\n  createInvoice: 'schtrack-finance/api/v1/Invoice/GenerateInvoice',\n  getAllInvoices: 'schtrack-finance/api/v1/Invoice/GetAllInvoices',\n  getInvoicepaymenthistory: 'schtrack-finance/api/v1/Invoice/GetPaymentHistoryInvoices',\n  getpendingInvoicepaymen: 'schtrack-finance/api/v1/Invoice/GetPendingPaymentInvoices',\n  getInvocesbyId: 'schtrack-finance/api/v1/Invoice/GetInvoice',\n  getpaymentinvoices: 'schtrack-finance/api/v1/Invoice/GetPaymentInvoices',\n  getinvoices: 'schtrack-finance/api/v1/Invoice/GetInvoices',\n  updateinvoices: 'schtrack-finance/api/v1/Invoice/UpdateInvoiceSelection',\n  createTransaction: 'schtrack-finance/api/v1/Transaction/NewTransaction',\n  viewAllTransaction: 'schtrack-finance/api/v1/Transaction/GetAllTransactions',\n  viewAwaitingApprovalTransaction: 'schtrack-finance/api/v1/Transaction/GetAllAwaitingApprovalTransactions',\n  viewPendingTransaction: 'schtrack-finance/api/v1/Transaction/GetAllPendingTransactions',\n  viewTransactionHistory: 'schtrack-finance/api/v1/Transaction/GetTransactionHistory',\n  editTransactionReciept: 'schtrack-finance/api/v1/Transaction/UploadTransactionReceipt',\n  rejectTransaction: 'schtrack-finance/api/v1/Transaction/ApproveRejectTransaction',\n  viewtransactionId: 'schtrack-finance/api/v1/Transaction/GetTransaction',\n  viewfile: 'schtrack-finance/api/v1/Files/GetFile',\n  getAllTransactionByStatus: 'schtrack-finance/api/v1/Transaction/GetAllTransactionsByStatus',\n  exportInvoiceInExcel: 'schtrack-finance/api/v1/Transaction/ExportInvoiceReportExcel',\n  exportInvoiceInPDF: 'schtrack-finance/api/v1/Transaction/ExportInvoiceReportPDF'\n};\nexport let FinanceService = /*#__PURE__*/(() => {\n  class FinanceService {\n    constructor(http) {\n      this.http = http;\n      this.baseUrl = environment.serverUrl;\n      this.baseUrl2 = environment.demourl;\n    }\n    createNewBankAccount(newAccountData) {\n      const url = `${this.baseUrl + routes.addBankAccount}`;\n      return this.http.post(url, newAccountData, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getAllBankAccount(p, perpage) {\n      const url = `${this.baseUrl + routes.getbankAccount}?PageIndex=${p}&PageSize=${perpage}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getBankAccountById(id) {\n      const url = `${this.baseUrl + routes.getbankAccountwithId}/${id}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    updateBankAccountById(id, updateDataForm) {\n      const url = `${this.baseUrl + routes.udatebankAccountwithId}/${id}`;\n      return this.http.put(url, updateDataForm, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    createNewAccountClass(newAccountData) {\n      const url = `${this.baseUrl + routes.addAccountclass}`;\n      return this.http.post(url, newAccountData, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getAllAccountClass() {\n      const url = `${this.baseUrl + routes.getAccountclass}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getAccountClassById(id) {\n      const url = `${this.baseUrl + routes.getAccountclassByid}/${id}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    updateAccountClassById(updateDataForm) {\n      const url = `${this.baseUrl + routes.editAccountclassByid}`;\n      return this.http.put(url, updateDataForm, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    createNewAccountType(newAccountData) {\n      const url = `${this.baseUrl + routes.addAccounttype}`;\n      return this.http.post(url, newAccountData, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getAllAccountType() {\n      const url = `${this.baseUrl + routes.getAccountTypes}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getAccountTypewithId(id) {\n      const url = `${this.baseUrl + routes.getAccountTypewithId}/${id}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getAccountTypeById(id) {\n      const url = `${this.baseUrl + routes.getAccountTypesbyId}/${id}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    updateAccountTypeById(id, updateDataForm) {\n      const url = `${this.baseUrl + routes.editAccountTypesbyId}/${id}`;\n      return this.http.put(url, updateDataForm, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    createNewChartAccount(newAccountData) {\n      const url = `${this.baseUrl + routes.createAccount}`;\n      return this.http.post(url, newAccountData, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getAllChartOfAccount() {\n      const url = `${this.baseUrl + routes.getChartAccount}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getChartAccountByID(id) {\n      const url = `${this.baseUrl + routes.getChartAccountWithId}/${id}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    updateChartAccountByID(id, formBody) {\n      const url = `${this.baseUrl + routes.editChartAccount}/${id}`;\n      return this.http.put(url, formBody, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    createFeeGroup(feegroupdata) {\n      const url = `${this.baseUrl + routes.addfeeGruop}`;\n      return this.http.post(url, feegroupdata, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getAllFeeGroup() {\n      const url = `${this.baseUrl + routes.getallfeeGruop}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getFeeGroupById(id) {\n      const url = `${this.baseUrl + routes.getfeeGruopById}/${id}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    UpdateFeeGroupByID(id, bodyData) {\n      const url = `${this.baseUrl + routes.updatefeeGruopById}/${id}`;\n      return this.http.put(url, bodyData, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    createNewComponent(componentData) {\n      const url = `${this.baseUrl + routes.createComponent}`;\n      return this.http.post(url, componentData, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getComponent() {\n      const url = `${this.baseUrl + routes.fetchComponent}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getComponentById(id) {\n      const url = `${this.baseUrl + routes.fetchComponentwithId}/${id}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    updateComponentById(id, formBody) {\n      const url = `${this.baseUrl + routes.editComponent}/${id}`;\n      return this.http.put(url, formBody, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    createFee(newAccountData) {\n      const url = `${this.baseUrl + routes.addNewFee}`;\n      return this.http.post(url, newAccountData, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getAllFees() {\n      const url = `${this.baseUrl + routes.viewAllfee}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getFeesById(id) {\n      const url = `${this.baseUrl + routes.viewfeeById}/${id}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    UpdateFeeById(id, formdata) {\n      const url = `${this.baseUrl + routes.editfeeById}/${id}`;\n      return this.http.put(url, formdata, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    generteInvoices(newAccountData) {\n      const url = `${this.baseUrl + routes.createInvoice}`;\n      return this.http.post(url, newAccountData, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getInvoicesById(id) {\n      const url = `${this.baseUrl + routes.getInvocesbyId}/${id}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getAllCretedInvoices() {\n      const url = `${this.baseUrl + routes.getAllInvoices}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getAllCretedInvoicesWithPagination(p, perpage) {\n      const url = `${this.baseUrl + routes.getAllInvoices}?PageIndex=${p}&PageSize=${perpage}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getInvoicePaymentHistory() {\n      const url = `${this.baseUrl + routes.getInvoicepaymenthistory}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getPendingInvoicePayment() {\n      const url = `${this.baseUrl + routes.viewPendingTransaction}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getPaymentInvoices() {\n      const url = `${this.baseUrl + routes.getpaymentinvoices}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getInvoices() {\n      const url = `${this.baseUrl + routes.getinvoices}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getAccountTypesByAccountClass(accountClassId) {\n      const url = `${this.baseUrl + routes.viewAccounttypesbyClass}/${accountClassId}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    createNewTransaction(transactionData) {\n      const url = `${this.baseUrl + routes.createTransaction}`;\n      return this.http.post(url, transactionData, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getAllTransactions() {\n      const url = `${this.baseUrl + routes.viewAllTransaction}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getAllTransactionsAwaitingApproval() {\n      const url = `${this.baseUrl + routes.viewAwaitingApprovalTransaction}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getAllPendingTransactions(StudentId) {\n      const url = `${this.baseUrl + routes.viewPendingTransaction}/${StudentId}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getAllTransactionHistory() {\n      const url = `${this.baseUrl + routes.viewTransactionHistory}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getTransactionBYId(id) {\n      const url = `${this.baseUrl + routes.viewtransactionId}/${id}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    updateSelectedInvoice(formBody) {\n      const url = `${this.baseUrl + routes.updateinvoices}`;\n      return this.http.put(url, formBody, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    updateTransactionReceipt(transactionData) {\n      const body = new FormData();\n      body.append('TransactionId', transactionData.TransactionId);\n      body.append('Document', transactionData.Document);\n      const url = `${this.baseUrl + routes.editTransactionReciept}`;\n      return this.http.put(url, body, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    ApproveRejectTransactionReceipt(transactionData) {\n      const url = `${this.baseUrl + routes.rejectTransaction}`;\n      return this.http.put(url, transactionData, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getFiles(id) {\n      const url = `${this.baseUrl + routes.viewfile}/${id}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getAllTransactionByStatus(p, perpage, status, keyword, filter, FromDate, ToDate) {\n      const url = `${this.baseUrl + routes.getAllTransactionByStatus}?Keyword=${keyword}&Filter=${filter}&PageIndex=${p}&PageSize=${perpage}&Status=${status}&From=${FromDate}&To=${ToDate}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    exportInvoiceInExcel(status, FromDate, ToDate) {\n      const url = `${this.baseUrl + routes.exportInvoiceInExcel}?Status=${status}&From=${FromDate}&To=${ToDate}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    exportInvoiceInPDF(status, FromDate, ToDate) {\n      const url = `${this.baseUrl + routes.exportInvoiceInPDF}?Status=${status}&From=${FromDate}&To=${ToDate}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    static #_ = (() => this.ɵfac = function FinanceService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || FinanceService)(i0.ɵɵinject(i1.HttpClient));\n    })();\n    static #_2 = (() => this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: FinanceService,\n      factory: FinanceService.ɵfac,\n      providedIn: 'root'\n    }))();\n  }\n  return FinanceService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}