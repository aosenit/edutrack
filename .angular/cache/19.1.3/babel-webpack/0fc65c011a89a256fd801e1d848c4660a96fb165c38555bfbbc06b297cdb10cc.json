{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst routes = {\n  getAlumnis: 'schtrack-auth/api/v1/Alumni/GetAllAlumni',\n  getAlumnWithId: 'schtrack-auth/api/v1/Alumni/GetAllAlumniById',\n  createAlumni: 'schtrack-auth/api/v1/Alumni/AddAlumni',\n  updateAlumi: 'schtrack-auth/api/v1/Alumni/UpdateAlumni',\n  createEvent: 'schtrack-auth/api/v1/AlumniEvent/AddEvent',\n  getAlumnisEvent: 'schtrack-auth/api/v1/AlumniEvent/GetAllEvents',\n  getAlumnisEventWithId: 'schtrack-auth/api/v1/AlumniEvent/GetEventById',\n  updateEvent: 'schtrack-auth/api/v1/AlumniEvent/UpdateEventById'\n};\nexport let AlumniService = /*#__PURE__*/(() => {\n  class AlumniService {\n    constructor(http) {\n      this.http = http;\n      this.baseUrl = environment.serverUrl;\n      this.baseUrl2 = environment.demourl;\n    }\n    getAllAlumnis(SessionName, TermName) {\n      const url = `${this.baseUrl + routes.getAlumnis}?SessionName=${SessionName}&TermName=${TermName}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getAllAlumniById() {\n      const url = `${this.baseUrl + routes.getAlumnWithId}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    createNewAllumni(payload) {\n      const url = `${this.baseUrl + routes.createAlumni}`;\n      return this.http.post(url, payload, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    createEvent(payload) {\n      const body = new FormData();\n      body.append('Name', payload.name);\n      body.append('Type', payload.type);\n      body.append('StartDate', payload.startDate);\n      body.append('EndDate', payload.endDate);\n      body.append('Location', payload.location);\n      body.append('Description', payload.description);\n      body.append('Status', payload.status);\n      body.append('EventTags', payload.tags);\n      body.append('file', payload.eventImg);\n      const url = `${this.baseUrl + routes.createEvent}`;\n      return this.http.post(url, body, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getAllEvents() {\n      const url = `${this.baseUrl + routes.getAlumnisEvent}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getAllAlumniEventId(id) {\n      const url = `${this.baseUrl + routes.getAlumnisEventWithId}/${id}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    updateEvent(id, payload) {\n      const body = new FormData();\n      body.append('Name', payload.name);\n      body.append('Type', payload.type);\n      body.append('StartDate', payload.startDate);\n      body.append('EndDate', payload.endDate);\n      body.append('Location', payload.location);\n      body.append('Description', payload.description);\n      body.append('Status', payload.status);\n      body.append('EventTags', payload.tags);\n      body.append('file', payload.eventImg);\n      const url = `${this.baseUrl + routes.updateEvent}/${id}`;\n      return this.http.put(url, body, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    static #_ = (() => this.ɵfac = function AlumniService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || AlumniService)(i0.ɵɵinject(i1.HttpClient));\n    })();\n    static #_2 = (() => this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AlumniService,\n      factory: AlumniService.ɵfac,\n      providedIn: 'root'\n    }))();\n  }\n  return AlumniService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}