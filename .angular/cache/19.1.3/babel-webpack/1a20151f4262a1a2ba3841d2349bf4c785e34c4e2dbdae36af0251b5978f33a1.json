{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst tenantId = '1';\nconst routes = {\n  addclass: 'schtrack-auth/api/v1/Class/AddClass',\n  addstudenttoclass: 'schtrack-auth/api/v1/Class/AddStudentToClass',\n  getclassbysection: 'schtrack-auth/api/v1/Class/GetClassBySection',\n  getallsubjectsforclass: 'schtrack-learning/api/v1/ClassSubject/GetSubjectsForClass',\n  // this endpoint get all subjects attached to a class\n  // tslint:disable-next-line:max-line-length\n  getallsubjectsWithAssignmentforclass: 'schtrack-learning/api/v1/ClassSubject/GetSubjectsForClassWithAssignmentCount',\n  // this endpoint get all subjects and assignment counts in each subject\n  // tslint:disable-next-line:max-line-length\n  getallsubjectsWithFiles: 'schtrack-learning/api/v1/ClassSubject/GetSubjectsForClassWithFilesCount',\n  // this endpoint get all subjects and assignment counts in each subject\n  // tslint:disable-next-line:max-line-length\n  getTeacherforSubject: 'schtrack-learning/api/v1/TeacherClassSubject/GetTeachersForClassSubject',\n  // this endpoint get all subjects attached to a class\n  assignSubjectToClass: 'schtrack-auth/api/v1/Class/AssignSubjectToClass',\n  assignTeacherToClass: 'schtrack-auth/api/v1/Class/AssignTeacherToClass',\n  getallclass: 'schtrack-auth/api/v1/Class/GetAllClasses',\n  getclassbyid: 'schtrack-auth/api/v1/Class/GetClassById',\n  getstudentclass: 'schtrack-auth/api/v1/Class/GetClassByIdWithStudents',\n  getTeacherclass: 'schtrack-auth/api/v1/Teacher/GetTeacherClass',\n  deleteclass: 'schtrack-auth/api/v1/Class/DeleteClass',\n  getClassAndSubjectForATeahcer: 'schtrack-learning/api/v1/TeacherClassSubject/GetAllClassSubjectsForTeacher',\n  getStudentInclass: 'schtrack-auth/api/v1/Student/GetStudentInClass',\n  updateclassbyid: 'schtrack-auth/api/v1/Class/UpdateClass',\n  updateparentbyid: 'schtrack-auth/api/v1/Parent/UpdateParent'\n};\nexport let ClassService = /*#__PURE__*/(() => {\n  class ClassService {\n    constructor(http) {\n      this.http = http;\n      this.baseUrl = environment.serverUrl;\n      this.baseUrl2 = environment.demourl;\n    }\n    addClass(result) {\n      const url = `${this.baseUrl + routes.addclass}`;\n      return this.http.post(url, result, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    addStudentsToClass(addStudentForm) {\n      const url = `${this.baseUrl + routes.addstudenttoclass}`;\n      return this.http.post(url, addStudentForm, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getClassBySection(id) {\n      const url = `${this.baseUrl + routes.getclassbysection}/${id}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    assignSubjectToClass(id, form) {\n      const url = `${this.baseUrl + routes.assignSubjectToClass}/${id}`;\n      return this.http.post(url, form, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    assignTeachToClass(id, form) {\n      const url = `${this.baseUrl + routes.assignTeacherToClass}/${id}`;\n      return this.http.post(url, form, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getAllClasses() {\n      const url = `${this.baseUrl + routes.getallclass}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getAllClassesWithPagination(p, perpage) {\n      const url = `${this.baseUrl + routes.getallclass}?PageIndex=${p}&PageSize=${perpage}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getClassById(id) {\n      const url = `${this.baseUrl + routes.getclassbyid}/${id}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getClassByIdWithStudent(id) {\n      const url = `${this.baseUrl + routes.getstudentclass}/${id}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    updateParent(id, updateParentForm) {\n      const url = `${this.baseUrl + routes.updateparentbyid}/${id}`;\n      return this.http.put(url, updateParentForm, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    editClass(payload) {\n      const url = `${this.baseUrl + routes.updateclassbyid}`;\n      // tslint:disable-next-line:max-line-length\n      return this.http.put(url, payload, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    deleteClassById(id) {\n      const url = `${this.baseUrl + routes.deleteclass}/${id}`;\n      return this.http.delete(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getAllSubjectsInAClassWithAssignmentCountByClassID() {\n      const url = `${this.baseUrl + routes.getallsubjectsWithAssignmentforclass}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getAllSubjectsInAClassByClassID(id) {\n      const url = `${this.baseUrl + routes.getallsubjectsWithAssignmentforclass}?classid=${id}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getAllSubjectsInAClassWithClassNotePreview() {\n      const url = `${this.baseUrl + routes.getallsubjectsWithFiles}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getTeacherTeachingSubject(id) {\n      const url = `${this.baseUrl + routes.getTeacherforSubject}/${id}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getClassAndSubjectForTeacherByTeacherId() {\n      const url = `${this.baseUrl + routes.getClassAndSubjectForATeahcer}`;\n      // ('teacher for sucject', url);\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getTeacherClassesByClassId(id) {\n      const url = `${this.baseUrl + routes.getTeacherclass}/${id}`;\n      // ('teacher for sucject', url);\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getStudentsInAClassByClassID(classId) {\n      const url = `${this.baseUrl + routes.getStudentInclass}/${classId}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getSubjectForClass(classId) {\n      const url = `${this.baseUrl + routes.getallsubjectsforclass}?classId=${classId}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    static #_ = (() => this.ɵfac = function ClassService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || ClassService)(i0.ɵɵinject(i1.HttpClient));\n    })();\n    static #_2 = (() => this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ClassService,\n      factory: ClassService.ɵfac,\n      providedIn: 'root'\n    }))();\n  }\n  return ClassService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}