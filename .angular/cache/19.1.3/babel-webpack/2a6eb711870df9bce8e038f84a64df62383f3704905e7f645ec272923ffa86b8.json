{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst routes = {\n  getSubscriptions: 'schtrack-auth/api/v1/Subscription/GetSubscription',\n  addSubscriptions: 'schtrack-auth/api/v1/Subscription/AddSubscription',\n  nextSubscriptions: 'schtrack-auth/api/v1/SubscriptionInvoice/GetNextSubsciptionInvoice',\n  updatenextSubscriptions: 'schtrack-auth/api/v1/SubscriptionInvoice/PostNextSubsciptionInvoice',\n  arrearsSubscriptions: 'schtrack-auth/api/v1/SubscriptionInvoice/GetArrearsSubsciptionInvoice',\n  updatearrearsSubscriptions: 'schtrack-auth/api/v1/SubscriptionInvoice/PostNextSubsciptionInvoice',\n  unpaidInvoice: 'schtrack-auth/api/v1/SubscriptionInvoice/GetSchoolSubsciptionInvoice',\n  payInvoice: 'schtrack-auth/api/v1/SubscriptionInvoice/MarkInvoiceAsPaid'\n};\nexport let SubscriptionsService = /*#__PURE__*/(() => {\n  class SubscriptionsService {\n    constructor(http) {\n      this.http = http;\n      this.baseUrl = environment.serverUrl;\n      this.baseUrl2 = environment.demourl;\n    }\n    getAllSubscriptions() {\n      const url = `${this.baseUrl + routes.getSubscriptions}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    createNewSubscription(payload) {\n      const url = `${this.baseUrl + routes.addSubscriptions}`;\n      return this.http.post(url, payload, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getNextSubscriptions(schoolId) {\n      const url = `${this.baseUrl + routes.nextSubscriptions}/${schoolId}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    createNextSubscription(payload) {\n      const url = `${this.baseUrl + routes.updatenextSubscriptions}`;\n      return this.http.post(url, payload, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getArrearSubscriptions(schoolId) {\n      const url = `${this.baseUrl + routes.arrearsSubscriptions}/${schoolId}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    createArrearsSubscription(payload) {\n      const url = `${this.baseUrl + routes.updatearrearsSubscriptions}`;\n      return this.http.post(url, payload, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getUnpaidUnvoice(schoolId) {\n      const url = `${this.baseUrl + routes.unpaidInvoice}/${schoolId}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    markInvoiceAsPaid(payload) {\n      const url = `${this.baseUrl + routes.payInvoice}`;\n      return this.http.put(url, payload, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    static #_ = (() => this.ɵfac = function SubscriptionsService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || SubscriptionsService)(i0.ɵɵinject(i1.HttpClient));\n    })();\n    static #_2 = (() => this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: SubscriptionsService,\n      factory: SubscriptionsService.ɵfac,\n      providedIn: 'root'\n    }))();\n  }\n  return SubscriptionsService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}