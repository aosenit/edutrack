{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst routes = {\n  addTimeTable: 'schtrack-learning/api/v1/TimeTable/UploadNewTimetableForClass ',\n  uploadPeriod: 'schtrack-learning/api/v1/TimeTable/UploadPeriod',\n  getPeriods: 'schtrack-learning/api/v1/TimeTable/GetPeriods',\n  addTimeTableCell: 'schtrack-learning/api/v1/TimeTable/AddNewTimetableCell',\n  addTimeTableBulk: 'schtrack-learning/api/v1/TimeTable/AddTimetableCells',\n  getTableforteacher: 'schtrack-learning/api/v1/TimeTable/GetTimetableForTeacher',\n  getTableforTeacherByDay: 'schtrack-learning/api/v1/TimeTable/GetAllClassesForTeacherByDay',\n  getTableforClassByDay: 'schtrack-learning/api/v1/TimeTable/GetAllClassesForClassToday',\n  getTableforClassByClassId: 'schtrack-learning/api/v1/TimeTable/GetTimetableForClass',\n  getNextClassesforTeacherByDay: 'schtrack-learning/api/v1/TimeTable/GetNextClassesForTeacherByDay',\n  getNextClassesforClassByDay: 'schtrack-learning/api/v1/TimeTable/GetNextClassesForClassToday',\n  deleteTableforClass: 'schtrack-learning/api/v1/TimeTable/DeleteTimetableCell'\n};\nexport let TimeTableService = /*#__PURE__*/(() => {\n  class TimeTableService {\n    constructor(http) {\n      this.http = http;\n      this.baseUrl = environment.serverUrl;\n    }\n    createNewTimeTable(timetableform) {\n      const url = `${this.baseUrl + routes.addTimeTable}`;\n      return this.http.post(url, timetableform);\n    }\n    createPeriod(periodForm) {\n      // const tenantId = '1'; // just a temporary header till email services is ready\n      const url = `${this.baseUrl + routes.uploadPeriod}`;\n      return this.http.post(url, periodForm, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getPeriods() {\n      // const tenantId = '1'; // just a temporary header till email services is ready\n      const url = `${this.baseUrl + routes.getPeriods}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    AddTimeTableCell(result) {\n      const tenantId = '1'; // just a temporary header till email services is ready\n      // const body = new FormData();\n      // body.append('PeriodId', result.PeriodId);\n      // body.append('Day', result.Day);\n      // body.append('TeacherClassSubjectId', result.TeacherClassSubjectId);\n      // body.append('HasVirtual', result.HasVirtual);\n      // body.append('NoOfPeriod', result.NoOfPeriod);\n      const url = `${this.baseUrl + routes.addTimeTableCell}`;\n      return this.http.post(url, result, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    AddTimeTableCellBulk(result) {\n      const url = `${this.baseUrl + routes.addTimeTableBulk}`;\n      return this.http.post(url, result, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getTimeTableForTeacher() {\n      const tenantId = '1'; // just a temporary header till email services is ready\n      const url = `${this.baseUrl + routes.getTableforteacher}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getTimeTableForClass() {\n      // const tenantId = '1'; // just a temporary header till email services is ready\n      const url = `${this.baseUrl + routes.getTableforClassByClassId}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getTimeTableForClassWithQuery(id) {\n      // const tenantId = '1'; // just a temporary header till email services is ready\n      const url = `${this.baseUrl + routes.getTableforClassByClassId}?classId=${id}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getAllClassesForTeacherByDay(day) {\n      const tenantId = '1'; // just a temporary header till email services is ready\n      const url = `${this.baseUrl + routes.getTableforTeacherByDay}?day=${day}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getAllClassesForClassByDay(day) {\n      const tenantId = '1'; // just a temporary header till email services is ready\n      const url = `${this.baseUrl + routes.getTableforClassByDay}?day=${day}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getNextClassessForTeacherByDay(teacherId, day) {\n      const tenantId = '1'; // just a temporary header till email services is ready\n      const url = `${this.baseUrl + routes.getNextClassesforTeacherByDay}?teacherId=${teacherId}&day=${day}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getNextClassessForClassByDay(classid, day) {\n      const tenantId = '1'; // just a temporary header till email services is ready\n      const url = `${this.baseUrl + routes.getNextClassesforClassByDay}?classid=${classid}&day=${day}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    static #_ = (() => this.ɵfac = function TimeTableService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || TimeTableService)(i0.ɵɵinject(i1.HttpClient));\n    })();\n    static #_2 = (() => this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TimeTableService,\n      factory: TimeTableService.ɵfac,\n      providedIn: 'root'\n    }))();\n  }\n  return TimeTableService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}