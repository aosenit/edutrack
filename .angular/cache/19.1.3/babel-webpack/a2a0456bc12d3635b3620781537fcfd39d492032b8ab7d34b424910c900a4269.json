{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst routes = {\n  newAdmin: 'schtrack-auth/api/v1/Admin',\n  getAdmins: 'schtrack-auth/api/v1/Admin',\n  getAllPermissions: 'schtrack-auth/api/v1/Role/GetAllPermissions',\n  createRoles: 'schtrack-auth/api/v1/Role/CreateRole',\n  editRoles: 'schtrack-auth/api/v1/Role/UpdatePermissionsToRole',\n  getRoles: 'schtrack-auth/api/v1/Role/GetRoles',\n  assignRoles: 'schtrack-auth/api/v1/Role/AddUserToRole',\n  deleteRoleById: 'schtrack-auth/api/v1/Role/RemoveRole',\n  getRolePermissions: 'schtrack-auth/api/v1/Role/GetRolePermissions'\n};\n// const routes = {\n//   newAdmin: 'api/v1/Admin',\n//   getAdmins: 'schtrack-auth/api/v1/Admin?PageIndex=1&PageSize=15',\n//   getAllPermissions: 'schtrack-auth/api/Role/GetAllPermissions'\n//   // getAdmins: 'api/v1/Admin?PageIndex=1&PageSize=10',\n// };\nexport let AdminService = /*#__PURE__*/(() => {\n  class AdminService {\n    constructor(http) {\n      this.http = http;\n      this.baseUrl = environment.serverUrl;\n      this.baseUrl2 = environment.demourl;\n    }\n    AddNewAdmin(userForm) {\n      const body = new FormData();\n      body.append('firstName', userForm.firstName);\n      body.append('lastName', userForm.lastName);\n      body.append('userName', userForm.userName);\n      body.append('email', userForm.email);\n      body.append('Files', userForm.image);\n      userForm.DocumentTypes.forEach(item => body.append('DocumentTypes', item));\n      body.append('phoneNumber', userForm.phoneNumber);\n      const url = `${this.baseUrl + routes.newAdmin}`;\n      return this.http.put(url, body, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getAdminByID(id) {\n      const url = `${this.baseUrl + routes.getAdmins}/${id}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getAllAdmin() {\n      const url = `${this.baseUrl + routes.getAdmins}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    updateAdmin(id, userForm) {\n      const body = new FormData();\n      body.append('firstName', userForm.firstName);\n      body.append('lastName', userForm.lastName);\n      body.append('userName', userForm.userName);\n      body.append('email', userForm.email);\n      body.append('Files', userForm.image);\n      userForm.DocumentTypes.forEach(item => body.append('DocumentTypes', item));\n      body.append('phoneNumber', userForm.phoneNumber);\n      const url = `${this.baseUrl + routes.newAdmin}/${id}`;\n      return this.http.post(url, body, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    deleteAdmin(id) {\n      const url = `${this.baseUrl + routes.getAdmins}/${id}`;\n      return this.http.delete(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getAllPermissions() {\n      const url = `${this.baseUrl + routes.getAllPermissions}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    createRoles(roleData) {\n      const url = `${this.baseUrl + routes.createRoles}`;\n      return this.http.post(url, roleData, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    updateRoles(roleData) {\n      const url = `${this.baseUrl + routes.editRoles}`;\n      return this.http.post(url, roleData, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getRoles() {\n      // const tenantId = '1'; // just a temporary header till email services is ready\n      const url = `${this.baseUrl + routes.getRoles}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    assignRolesToUsers(form) {\n      const tenantId = '1'; // just a temporary header till email services is ready\n      const url = `${this.baseUrl + routes.assignRoles}`;\n      return this.http.post(url, form, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    deleteRoles(id) {\n      const url = `${this.baseUrl + routes.deleteRoleById}/${id}`;\n      return this.http.delete(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getAllPermissionForRoleById(id) {\n      const url = `${this.baseUrl + routes.getRolePermissions}/${id}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    static #_ = (() => this.ɵfac = function AdminService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || AdminService)(i0.ɵɵinject(i1.HttpClient));\n    })();\n    static #_2 = (() => this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AdminService,\n      factory: AdminService.ɵfac,\n      providedIn: 'root'\n    }))();\n  }\n  return AdminService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}