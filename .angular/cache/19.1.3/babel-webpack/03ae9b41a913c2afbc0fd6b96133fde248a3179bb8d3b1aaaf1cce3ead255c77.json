{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst routes = {\n  addparent: 'schtrack-auth/api/v1/Parent/AddNewParent  ',\n  getallparent: 'schtrack-auth/api/v1/Parent/GetAllParents',\n  getallparentinASchool: 'schtrack-auth/api/v1/Parent/GetAllParentsInSchool',\n  getparentbyid: 'schtrack-auth/api/v1/Parent/GetParentById',\n  getparentbyname: 'schtrack-auth/api/v1/Parent/GetParentByFirstName',\n  getstudentparent: 'schtrack-auth/api/v1/Parent/GetParentsForStudent',\n  updateparentbyid: 'schtrack-auth/api/v1/Parent/UpdateParent',\n  deleteparent: 'schtrack-auth/api/v1/Parent/DeleteParent',\n  getstudentSchools: 'schtrack-auth/api/v1/Parent/GetStudentsSchools',\n  getstudentInASchoolsForParent: 'schtrack-auth/api/v1/Parent/GetStudentsInSchool',\n  searchParent: 'schtrack-auth/api/v1/Parent/GetParentBySchoolIdAndName',\n  exportSingleStudentAttendanceForClassPdf: 'schtrack-learning/api/v1/Attendance/ExportSingleStudentAttendanceForClassPDF',\n  exportSingleStudentAttendanceForSubjectPdf: 'schtrack-learning/api/v1/Attendance/ExportSingleStudentAttendanceForSubjectPDF',\n  exportSingleStudentAttendanceForClassExcel: 'schtrack-learning/api/v1/Attendance/ExportSingleStudentAttendanceForClassExcel',\n  exportSingleStudentAttendanceForSubjectExcel: 'schtrack-learning/api/v1/Attendance/ExportSingleStudentAttendanceForSubjectExcel',\n  getallSubjects: 'schtrack-learning/api/v1/Subject/GetAllSubjects',\n  getBulkDdownload: 'schtrack-auth/api/v1/Parent/GetParentsExcelSheet',\n  bulkUpload: 'schtrack-auth/api/v1/Parent/AddBulkParent',\n  // All endpoint below are exclusively for the parent portal\n  getTableforClassByClassId: 'schtrack-learning/api/v1/TimeTable/GetTimetableForClass',\n  getTableforClassByDay: 'schtrack-learning/api/v1/TimeTable/GetAllClassesForClassToday',\n  getPeriods: 'schtrack-learning/api/v1/TimeTable/GetPeriods',\n  // tslint:disable-next-line:max-line-length\n  getallsubjectsWithAssignmentforclass: 'schtrack-learning/api/v1/ClassSubject/GetSubjectsForClassWithAssignmentCount',\n  // this endpoint get all subjects and assignment counts in each subject\n  getAssignmentByClassSubject: 'schtrack-learning/api/v1/Assignment/GetAssignmentsByClassSubject',\n  getchildsubmissions: 'schtrack-learning/api/v1/AssignmentAnswer/GetAssignmentSubmissionForStudent',\n  getsubjectAttendance: 'schtrack-learning/api/v1/Attendance/GetStudentAttendanceForSubject',\n  getclassAttendance: 'schtrack-learning/api/v1/Attendance/GetStudentAttendanceForClass',\n  getapprovedResult: 'schtrack-assessment/api/v1/Result/GetApprovedStudentReportSheet',\n  viewstudentbehaviour: 'schtrack-assessment/api/v1/Result/GetBehaviourResult',\n  getClassAndSubjectForATeahcer: 'schtrack-learning/api/v1/TeacherClassSubject/GetAllClassSubjectsForTeacher',\n  getschoolSessions: 'schtrack-assessment/api/v1/SessionSetup/GetSchoolSessions',\n  getinvoices: 'schtrack-finance/api/v1/Invoice/GetInvoices',\n  updateinvoices: 'schtrack-finance/api/v1/Invoice/UpdateInvoiceSelection',\n  getInvoicepaymenthistory: 'schtrack-finance/api/v1/Invoice/GetPaymentHistoryInvoices',\n  createTransaction: 'schtrack-finance/api/v1/Transaction/NewTransaction',\n  editTransactionReciept: 'schtrack-finance/api/v1/Transaction/UploadTransactionReceipt',\n  getInvocesbyId: 'schtrack-finance/api/v1/Invoice/GetInvoice',\n  viewTransactionHistory: 'schtrack-finance/api/v1/Transaction/GetTransactionHistory',\n  viewAllTransaction: 'schtrack-finance/api/v1/Transaction/GetAllTransactions',\n  viewPendingTransaction: 'schtrack-finance/api/v1/Transaction/GetAllPendingTransactions',\n  viewfile: 'schtrack-finance/api/v1/Files/GetFile',\n  getAllGradeSetup: 'schtrack-assessment/api/v1/GradeSetup/GetAllGradeForSchoolSetup',\n  viewSchoolproperty: 'schtrack-auth/api/v1/School/GetSchoolNameAndLogo',\n  getschoolbyid: 'schtrack-auth/api/v1/School/GetSchool',\n  getassessmentsetup: 'schtrack-assessment/api/v1/AssessmentSetup/GetAllAssessmentSetup',\n  staffSignature: 'schtrack-auth/api/v1/Staff/GetStaffNameAndSignatureByUserId',\n  getStudentSubjectAttendance: 'schtrack-learning/api/v1/Attendance/GetStudentAttendanceForSubject'\n};\nconst tenantId = sessionStorage.getItem('tenant');\nexport let ParentsService = /*#__PURE__*/(() => {\n  class ParentsService {\n    constructor(http) {\n      this.http = http;\n      this.baseUrl = environment.serverUrl;\n      this.baseUrl2 = environment.demourl;\n    }\n    addParent(createParentForm) {\n      const formData = new FormData();\n      formData.append('HomeAddress', createParentForm.HomeAddress);\n      formData.append('SecondaryPhoneNumber', createParentForm.SecondaryPhoneNumber);\n      formData.append('SecondaryEmailAddress', createParentForm.SecondaryEmailAddress);\n      formData.append('EmailAddress', createParentForm.EmailAddress);\n      formData.append('FirstName', createParentForm.FirstName);\n      formData.append('LastName', createParentForm.LastName);\n      formData.append('OtherName', createParentForm.OtherName);\n      formData.append('ModeOfIdentification', createParentForm.ModeOfIdentification);\n      formData.append('IdentificationNumber', createParentForm.IdentificationNumber);\n      formData.append('PhoneNumber', createParentForm.PhoneNumber);\n      formData.append('Occupation', createParentForm.Occupation);\n      formData.append('OfficeAddress', createParentForm.OfficeAddress);\n      formData.append('File', createParentForm.profileImage);\n      createParentForm.DocumentTypes.forEach(item => formData.append('DocumentType', item));\n      formData.append('Sex', createParentForm.Sex);\n      formData.append('Status', createParentForm.Status);\n      formData.append('Title', createParentForm.Title);\n      const url = `${this.baseUrl + routes.addparent}`;\n      return this.http.post(url, formData, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getAllParents(p, perpage) {\n      const url = `${this.baseUrl + routes.getallparent}?PageIndex=${p}&PageSize=${perpage}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getAllParentsInASchool(schoolId, p, perpage) {\n      const url = `${this.baseUrl + routes.getallparentinASchool}/${schoolId}?PageIndex=${p}&PageSize=${perpage}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getAllParentsWithName() {\n      const url = `${this.baseUrl + routes.getallparent}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getParentById(id) {\n      const url = `${this.baseUrl + routes.getparentbyid}/${id}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getParentByFirstName(name) {\n      const url = `${this.baseUrl + routes.getparentbyname}/${name}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    searchSingleParent(name, schoolId) {\n      const url = `${this.baseUrl + routes.searchParent}?Name=${name}&SchoolId=${schoolId}`;\n      // console.log(url);\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getParentForStudent(studid) {\n      const url = `${this.baseUrl + routes.getstudentparent}/${studid}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    updateParent(id, updateParentForm) {\n      const formData = new FormData();\n      formData.append('HomeAddress', updateParentForm.HomeAddress);\n      formData.append('SecondaryPhoneNumber', updateParentForm.SecondaryPhoneNumber);\n      formData.append('SecondaryEmailAddress', updateParentForm.SecondaryEmailAddress);\n      formData.append('EmailAddress', updateParentForm.EmailAddress);\n      formData.append('FirstName', updateParentForm.FirstName);\n      formData.append('LastName', updateParentForm.LastName);\n      formData.append('OtherName', updateParentForm.OtherName);\n      formData.append('ModeOfIdentification', updateParentForm.ModeOfIdentification);\n      formData.append('IdentificationNumber', updateParentForm.IdentificationNumber);\n      formData.append('PhoneNumber', updateParentForm.PhoneNumber);\n      formData.append('Occupation', updateParentForm.Occupation);\n      formData.append('OfficeAddress', updateParentForm.OfficeAddress);\n      formData.append('File', updateParentForm.profileImage);\n      updateParentForm.DocumentTypes.forEach(item => formData.append('DocumentType', item));\n      formData.append('Sex', updateParentForm.Sex);\n      formData.append('Status', updateParentForm.Status);\n      formData.append('Title', updateParentForm.Title);\n      const url = `${this.baseUrl + routes.updateparentbyid}/${id}`;\n      return this.http.put(url, formData, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    deleteParentById(id) {\n      const url = `${this.baseUrl + routes.deleteparent}/${id}`;\n      return this.http.delete(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    downloadSampleBulkSheet() {\n      const url = `${this.baseUrl + routes.getBulkDdownload}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    uploadBulkDocument(payload) {\n      const body = new FormData();\n      body.append('File', payload.Document);\n      const url = `${this.baseUrl + routes.bulkUpload}`;\n      return this.http.post(url, body, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    // Endpoints designnated for parent portal\n    getStudentSchools() {\n      const url = `${this.baseUrl + routes.getstudentSchools}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getChildInASchoolForParent() {\n      // const id = sessionStorage.getItem('tenant');\n      // const tenantId = id;\n      const url = `${this.baseUrl + routes.getstudentInASchoolsForParent}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token'),\n          tenantId\n        }\n      });\n    }\n    getPeriods() {\n      // const id = sessionStorage.getItem('tenant');\n      // const tenantId = id;\n      const url = `${this.baseUrl + routes.getPeriods}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token'),\n          tenantId\n        }\n      });\n    }\n    getTimeTableForClass(classId) {\n      // const id = sessionStorage.getItem('tenant');\n      // const tenantId = id;\n      const url = `${this.baseUrl + routes.getTableforClassByClassId}?classId=${classId}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token'),\n          tenantId\n        }\n      });\n    }\n    getAllClassesForClassByDay(classId, day) {\n      // const id = sessionStorage.getItem('tenant');\n      // const tenantId = id;\n      const url = `${this.baseUrl + routes.getTableforClassByDay}?classId=${classId}&day=${day}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token'),\n          tenantId\n        }\n      });\n    }\n    getAllSubjectsInAClassByClassID(id) {\n      const url = `${this.baseUrl + routes.getallsubjectsWithAssignmentforclass}?classid=${id}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token'),\n          tenantId\n        }\n      });\n    }\n    getAllSubjects() {\n      const url = `${this.baseUrl + routes.getallSubjects}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token'),\n          tenantId\n        }\n      });\n    }\n    getAllSubjectsInAClassWithAssignmentCountByClassID(classId) {\n      // const id = sessionStorage.getItem('tenant');\n      // const tenantId = id;\n      const url = `${this.baseUrl + routes.getallsubjectsWithAssignmentforclass}?classId=${classId}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token'),\n          tenantId\n        }\n      });\n    }\n    getAssignmentsByClassSubject(classSubjectId) {\n      // const id = sessionStorage.getItem('tenant');\n      // const tenantId = id;\n      const url = `${this.baseUrl + routes.getAssignmentByClassSubject}?classSubjectId=${classSubjectId}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token'),\n          tenantId\n        }\n      });\n    }\n    getStudentAssignmentSubmission(childId) {\n      const url = `${this.baseUrl + routes.getchildsubmissions}?studentId=${childId}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token'),\n          tenantId\n        }\n      });\n    }\n    getSubjectAttendance(StudentId) {\n      const url = `${this.baseUrl + routes.getsubjectAttendance}?StudentId=${StudentId}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token'),\n          tenantId\n        }\n      });\n    }\n    getStudentAttendanceForSubject(studentId, studentUserId, subjectId, date) {\n      const url = `${this.baseUrl + routes.getStudentSubjectAttendance}?studentId=${studentId}&studentUserId=${studentUserId}&subjectId=${subjectId}&date=${date}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token'),\n          tenantId\n        }\n      });\n    }\n    getClassAttendance(StudentId, ClassId, FromDate, ToDate) {\n      const url = `${this.baseUrl + routes.getclassAttendance}?StudentId=${StudentId}&ClassId=${ClassId}&FromDate=${FromDate}&ToDate=${ToDate}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token'),\n          tenantId\n        }\n      });\n    }\n    getStudentBehviour(SessionId, TermSequence, ClassId, StudentId) {\n      // tslint:disable-next-line:max-line-length\n      const url = `${this.baseUrl + routes.viewstudentbehaviour}?SessionId=${SessionId}&TermSequence=${TermSequence}&ClassId=${ClassId}&StudentId=${StudentId}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token'),\n          tenantId\n        }\n      });\n    }\n    getApprovedStudentResult(studId, classId, sessionId, termSequenceNumber) {\n      // tslint:disable-next-line:max-line-length\n      const url = `${this.baseUrl + routes.getapprovedResult}?studId=${studId}&classId=${classId}&sessionId=${sessionId}&termSequenceNumber=${termSequenceNumber}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token'),\n          tenantId\n        }\n      });\n    }\n    getSchoolSessions() {\n      const url = `${this.baseUrl + routes.getschoolSessions}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token'),\n          tenantId\n        }\n      });\n    }\n    getInvoices(ClassId, StudentId) {\n      const url = `${this.baseUrl + routes.getinvoices}?ClassId=${ClassId}&StudentId=${StudentId}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token'),\n          tenantId\n        }\n      });\n    }\n    getTransactionPaymentHistory(StudentId) {\n      const url = `${this.baseUrl + routes.viewTransactionHistory}/${StudentId}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token'),\n          tenantId\n        }\n      });\n    }\n    createNewTransaction(transactionData) {\n      const url = `${this.baseUrl + routes.createTransaction}`;\n      return this.http.post(url, transactionData, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token'),\n          tenantId\n        }\n      });\n    }\n    getAllTransactions() {\n      const url = `${this.baseUrl + routes.viewAllTransaction}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token'),\n          tenantId\n        }\n      });\n    }\n    getInvoicesById(id) {\n      const url = `${this.baseUrl + routes.getInvocesbyId}/${id}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token'),\n          tenantId\n        }\n      });\n    }\n    getAllPendingTransactions(StudentId) {\n      const url = `${this.baseUrl + routes.viewPendingTransaction}?studentId=${StudentId}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token'),\n          tenantId\n        }\n      });\n    }\n    updateTransactionReceipt(transactionData) {\n      const body = new FormData();\n      body.append('TransactionId', transactionData.TransactionId);\n      body.append('PaymentReference', transactionData.PaymentReference);\n      body.append('PaymentDescription', transactionData.PaymentDescription);\n      body.append('Document', transactionData.Document);\n      const url = `${this.baseUrl + routes.editTransactionReciept}`;\n      return this.http.put(url, body, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token'),\n          tenantId\n        }\n      });\n    }\n    updateSelectedInvoice(formBody) {\n      const url = `${this.baseUrl + routes.updateinvoices}`;\n      return this.http.put(url, formBody, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token'),\n          tenantId\n        }\n      });\n    }\n    getFiles(id) {\n      const url = `${this.baseUrl + routes.viewfile}/${id}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token'),\n          tenantId\n        }\n      });\n    }\n    getAllGradeSetupForSchool() {\n      const url = `${this.baseUrl + routes.getAllGradeSetup}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token'),\n          tenantId\n        }\n      });\n    }\n    getSchoolLogo() {\n      const url = `${this.baseUrl + routes.viewSchoolproperty}/${tenantId}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token'),\n          tenantId\n        }\n      });\n    }\n    getSchoolById(id) {\n      const url = `${this.baseUrl + routes.getschoolbyid}/${id}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token'),\n          tenantId\n        }\n      });\n    }\n    getAllAssessmentSetup() {\n      const url = `${this.baseUrl + routes.getassessmentsetup}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token'),\n          tenantId\n        }\n      });\n    }\n    getStaffSignature(userId) {\n      const url = `${this.baseUrl + routes.staffSignature}/${userId}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token'),\n          tenantId\n        }\n      });\n    }\n    exportSingleStudentAttendanceByClassExcel(StudentId, StudentUserId, ClassId, FromDate, ToDate) {\n      const url = `${this.baseUrl + routes.exportSingleStudentAttendanceForClassExcel}?StudentId=${StudentId}&StudentUserId=${StudentUserId}&ClassId=${ClassId}&FromDate=${FromDate}&ToDate=${ToDate}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token'),\n          tenantId\n        }\n      });\n    }\n    exportSingleStudentAttendanceByClassPdf(StudentId, StudentUserId, ClassId, FromDate, ToDate) {\n      const url = `${this.baseUrl + routes.exportSingleStudentAttendanceForClassPdf}?StudentId=${StudentId}&StudentUserId=${StudentUserId}&ClassId=${ClassId}&FromDate=${FromDate}&ToDate=${ToDate}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token'),\n          tenantId\n        }\n      });\n    }\n    exportSingleStudentAttendanceBySubjectExcel(studentId, studentUserId, subjectId, date) {\n      const url = `${this.baseUrl + routes.exportSingleStudentAttendanceForSubjectExcel}?studentId=${studentId}&studentUserId=${studentUserId}&subjectId=${subjectId}&date=${date}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token'),\n          tenantId\n        }\n      });\n    }\n    exportSingleStudentAttendanceBySubjectPdf(studentId, studentUserId, subjectId, date) {\n      const url = `${this.baseUrl + routes.exportSingleStudentAttendanceForSubjectPdf}?studentId=${studentId}&studentUserId=${studentUserId}&subjectId=${subjectId}&date=${date}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token'),\n          tenantId\n        }\n      });\n    }\n    static #_ = (() => this.ɵfac = function ParentsService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || ParentsService)(i0.ɵɵinject(i1.HttpClient));\n    })();\n    static #_2 = (() => this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ParentsService,\n      factory: ParentsService.ɵfac,\n      providedIn: 'root'\n    }))();\n  }\n  return ParentsService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}