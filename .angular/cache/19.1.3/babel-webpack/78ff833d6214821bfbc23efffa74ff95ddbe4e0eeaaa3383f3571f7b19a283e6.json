{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst routes = {\n  addschool: 'schtrack-auth/api/v1/School/AddSchool ',\n  getschoolbyid: 'schtrack-auth/api/v1/School/GetSchool',\n  getallschool: 'schtrack-auth/api/v1/School/GetSchools',\n  getSubscriptionStatus: 'schtrack-auth/api/v1/School/NotifySubcriptionExpirationDateToAdmin',\n  // getallschool: 'api/v1/School/GetSchools?PageIndex=1&PageSize=10',\n  //  grouped schools\n  addGroupedSchools: 'schtrack-auth/api/v1/SchoolGroup/AddSchoolGroup ',\n  getGroupSchools: 'schtrack-auth/api/v1/SchoolGroup/GetAllSchoolsInGroup',\n  getAllGroupSchools: 'schtrack-auth/api/v1/SchoolGroup/GetSchoolGroups',\n  getSchoolGroupById: 'schtrack-auth/api/v1/SchoolGroup/GetSchoolGroupsById',\n  getSchoolGroupAnalytics: 'schtrack-auth/api/v1/SchoolGroup/GetSchoolGroupAnalytics',\n  getSchoolOfSchoolsSchoolData: 'schtrack-auth/api/v1/School/GetGroupOfSchoolSchoolsData',\n  // others\n  bulkUplaod: 'schtrack-auth/api/v1/School/BulkAddSchool',\n  updateschoolbyid: 'schtrack-auth/api/v1/School/UpdateSchool',\n  deleteschool: 'schtrack-auth/api/v1/School/DeleteSchool',\n  viewSchoolproperty: 'schtrack-auth/api/v1/School/GetSchoolNameAndLogo',\n  getSchoolDomain: 'schtrack-auth/api/v1/School/GetSchoolNameAndLogoByDomain',\n  activateschool: 'schtrack-auth/api/v1/School/EnableSchool',\n  deactivateschool: 'schtrack-auth/api/v1/School/DisableSchool'\n};\nexport let SchoolService = /*#__PURE__*/(() => {\n  class SchoolService {\n    constructor(http) {\n      this.http = http;\n      this.baseUrl = environment.serverUrl;\n      this.baseUrl2 = environment.demourl;\n    }\n    addSchool(schoolFinalStep) {\n      const {\n        GroupId\n      } = schoolFinalStep;\n      if (schoolFinalStep.GroupId !== null || undefined) {\n        const formData = new FormData();\n        formData.append('Name', schoolFinalStep.Name);\n        formData.append('DomainName', schoolFinalStep.DomainName);\n        formData.append('WebsiteAddress', schoolFinalStep.WebsiteAddress);\n        formData.append('Username', schoolFinalStep.Username);\n        formData.append('Files', schoolFinalStep.logo);\n        formData.append('Files', schoolFinalStep.icon);\n        formData.append('PrimaryColor', schoolFinalStep.PrimaryColor);\n        formData.append('SecondaryColor', schoolFinalStep.SecondaryColor);\n        // formData.append('DocumentTypes', schoolFinalStep.DocumentTypes);\n        schoolFinalStep.DocumentTypes.forEach(item => formData.append('DocumentTypes', item));\n        formData.append('Country', schoolFinalStep.Country);\n        formData.append('Address', schoolFinalStep.Address);\n        formData.append('State', schoolFinalStep.State);\n        formData.append('City', schoolFinalStep.City);\n        formData.append('ContactFirstName', schoolFinalStep.ContactFirstName);\n        formData.append('ContactLastName', schoolFinalStep.ContactLastName);\n        formData.append('ContactEmailPassword', schoolFinalStep.ContactEmailPassword);\n        formData.append('ContactPhoneNo', schoolFinalStep.ContactPhoneNo);\n        formData.append('ContactEmail', schoolFinalStep.ContactEmail);\n        formData.append('IsActive', schoolFinalStep.isActive);\n        formData.append('GroupId', schoolFinalStep.GroupId);\n        const url = `${this.baseUrl + routes.addschool}`;\n        // // ('asasas', schoolFinalStep);\n        return this.http.post(url, formData, {\n          headers: {\n            Authorization: 'Bearer ' + localStorage.getItem('access_token')\n          }\n        });\n      } else {\n        const formData = new FormData();\n        formData.append('Name', schoolFinalStep.Name);\n        formData.append('DomainName', schoolFinalStep.DomainName);\n        formData.append('WebsiteAddress', schoolFinalStep.WebsiteAddress);\n        formData.append('Username', schoolFinalStep.Username);\n        formData.append('Files', schoolFinalStep.logo);\n        formData.append('Files', schoolFinalStep.icon);\n        formData.append('PrimaryColor', schoolFinalStep.PrimaryColor);\n        formData.append('SecondaryColor', schoolFinalStep.SecondaryColor);\n        // formData.append('DocumentTypes', schoolFinalStep.DocumentTypes);\n        schoolFinalStep.DocumentTypes.forEach(item => formData.append('DocumentTypes', item));\n        formData.append('Country', schoolFinalStep.Country);\n        formData.append('Address', schoolFinalStep.Address);\n        formData.append('State', schoolFinalStep.State);\n        formData.append('City', schoolFinalStep.City);\n        formData.append('ContactFirstName', schoolFinalStep.ContactFirstName);\n        formData.append('ContactLastName', schoolFinalStep.ContactLastName);\n        formData.append('ContactEmailPassword', schoolFinalStep.ContactEmailPassword);\n        formData.append('ContactPhoneNo', schoolFinalStep.ContactPhoneNo);\n        formData.append('ContactEmail', schoolFinalStep.ContactEmail);\n        formData.append('IsActive', schoolFinalStep.isActive);\n        // formData.append('GroupId', schoolFinalStep.GroupId);\n        const url = `${this.baseUrl + routes.addschool}`;\n        // // ('asasas', schoolFinalStep);\n        return this.http.post(url, formData, {\n          headers: {\n            Authorization: 'Bearer ' + localStorage.getItem('access_token')\n          }\n        });\n      }\n    }\n    getAllSchools(p, perpage) {\n      // const url = `${this.baseUrl + routes.getallschool}`;\n      const url = `${this.baseUrl + routes.getallschool}?PageIndex=${p}&PageSize=${perpage}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getSchoolById(id) {\n      const url = `${this.baseUrl + routes.getschoolbyid}/${id}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getSchoolSubscriptionStatusById(id) {\n      const url = `${this.baseUrl + routes.getSubscriptionStatus}/${id}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getGroupOfSchoolsSchoolData(groupId, id) {\n      const url = `${this.baseUrl + routes.getSchoolOfSchoolsSchoolData}?groupId=${groupId}&id=${id}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    uploadBulkDocument(bulkUpload) {\n      const formData = new FormData();\n      formData.append('File', bulkUpload.bulkFile);\n      const url = `${this.baseUrl + routes.bulkUplaod}`;\n      return this.http.post(url, formData, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    updateSchool(id, updateSchoolForm) {\n      const formData = new FormData();\n      formData.append('Name', updateSchoolForm.Name);\n      formData.append('DomainName', updateSchoolForm.DomainName);\n      formData.append('WebsiteAddress', updateSchoolForm.WebsiteAddress);\n      formData.append('Username', updateSchoolForm.Username);\n      formData.append('Files', updateSchoolForm.logo);\n      formData.append('Files', updateSchoolForm.icon);\n      formData.append('PrimaryColor', updateSchoolForm.PrimaryColor);\n      formData.append('SecondaryColor', updateSchoolForm.SecondaryColor);\n      // formData.append('DocumentTypes', updateSchoolForm.DocumentTypes);\n      updateSchoolForm.DocumentTypes.forEach(item => formData.append('DocumentTypes', item));\n      formData.append('Country', updateSchoolForm.Country);\n      formData.append('Address', updateSchoolForm.Address);\n      formData.append('State', updateSchoolForm.State);\n      formData.append('City', updateSchoolForm.City);\n      formData.append('ContactFirstName', updateSchoolForm.ContactFirstName);\n      formData.append('ContactLastName', updateSchoolForm.ContactLastName);\n      formData.append('ContactPhoneNo', updateSchoolForm.ContactPhoneNo);\n      formData.append('ContactEmail', updateSchoolForm.ContactEmail);\n      formData.append('ContactEmailPassword', updateSchoolForm.ContactEmailPassword);\n      const url = `${this.baseUrl + routes.updateschoolbyid}/${id}`;\n      return this.http.put(url, formData, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    deleteSchoolById(userid) {\n      const url = `${this.baseUrl + routes.deleteschool}/${userid}`;\n      return this.http.delete(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getSchoolLogo(id) {\n      const url = `${this.baseUrl + routes.viewSchoolproperty}/${id}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getSchoolDomainName(domain) {\n      const url = `${this.baseUrl + routes.getSchoolDomain}/${domain}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    addSchoolGroup(schoolFinalStep) {\n      const formData = new FormData();\n      formData.append('Name', schoolFinalStep.Name);\n      formData.append('WebsiteAddress', schoolFinalStep.WebsiteAddress);\n      formData.append('Files', schoolFinalStep.logo);\n      formData.append('Files', schoolFinalStep.icon);\n      formData.append('PrimaryColor', schoolFinalStep.PrimaryColor);\n      formData.append('SecondaryColor', schoolFinalStep.SecondaryColor);\n      // formData.append('DocumentTypes', schoolFinalStep.DocumentTypes);\n      schoolFinalStep.DocumentTypes.forEach(item => formData.append('DocumentTypes', item));\n      formData.append('ContactFirstName', schoolFinalStep.ContactFirstName);\n      formData.append('ContactLastName', schoolFinalStep.ContactLastName);\n      formData.append('ContactEmailPassword', schoolFinalStep.ContactEmailPassword);\n      formData.append('ContactPhoneNo', schoolFinalStep.ContactPhoneNo);\n      formData.append('ContactEmail', schoolFinalStep.ContactEmail);\n      formData.append('IsActive', schoolFinalStep.isActive);\n      const url = `${this.baseUrl + routes.addGroupedSchools}`;\n      return this.http.post(url, formData, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getAllGroupsInASchool(p, perpage, groupId) {\n      const url = `${this.baseUrl + routes.getGroupSchools}?PageIndex=${p}&PageSize=${perpage}&groupId=${groupId}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getSchoolGroupByItsId(id) {\n      const url = `${this.baseUrl + routes.getSchoolGroupById}/${id}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getAllGroupSchools() {\n      const url = `${this.baseUrl + routes.getAllGroupSchools}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getSchoolGroupAnalytics(id) {\n      const url = `${this.baseUrl + routes.getSchoolGroupAnalytics}/${id}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    activateSchool(id) {\n      const url = `${this.baseUrl + routes.activateschool}/${id}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    deactivateSchool(id) {\n      const url = `${this.baseUrl + routes.deactivateschool}/${id}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    static #_ = (() => this.ɵfac = function SchoolService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || SchoolService)(i0.ɵɵinject(i1.HttpClient));\n    })();\n    static #_2 = (() => this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: SchoolService,\n      factory: SchoolService.ɵfac,\n      providedIn: 'root'\n    }))();\n  }\n  return SchoolService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}