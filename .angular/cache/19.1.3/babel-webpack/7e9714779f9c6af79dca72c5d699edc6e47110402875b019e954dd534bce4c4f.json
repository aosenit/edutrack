{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst routes = {\n  addstudent: 'schtrack-auth/api/v1/Student/AddStudent',\n  getallstudent: 'schtrack-auth/api/v1/Student/GetAllStudent',\n  viewstudentdetails: 'schtrack-auth/api/v1/Student/GetStudentProfile',\n  getstudentbyid: 'schtrack-auth/api/v1/Student/GetStudentById',\n  updatestudentbyid: 'schtrack-auth/api/v1/Student/UpdateStudent',\n  deletestudent: 'schtrack-auth/api/v1/Student/DeleteStudent',\n  getBulkDdownload: 'schtrack-auth/api/v1/Student/GetStudentsExcelSheet',\n  bulkUpload: 'schtrack-auth/api/v1/Student/AddBulkStudent',\n  searchStudent: 'schtrack-auth/api/v1/Student/GetStudentByName',\n  downloadStudentsReport: 'schtrack-auth/api/v1/Student/GetStudentDataInExcel',\n  downloadStudentsReportInPdf: 'schtrack-auth/api/v1/Student/GetStudentDataInPDF',\n  getStudentInAClass: 'schtrack-auth/api/v1/Student/GetAllStudentInSchoolOrClass',\n  getTotalUsersOnPlatform: 'schtrack-auth/api/v1/School/GetTotalUsersOnPlatform'\n};\nexport let StudentService = /*#__PURE__*/(() => {\n  class StudentService {\n    constructor(http) {\n      this.http = http;\n      this.baseUrl = environment.serverUrl;\n    }\n    addStudent(studentForm) {\n      // const tenantId = '1'; // just a temporary header till email services is ready\n      const {\n        immunizationVms\n      } = studentForm;\n      const body = new FormData();\n      body.append('FirstName', studentForm.FirstName);\n      body.append('LastName', studentForm.LastName);\n      body.append('OtherNames', studentForm.OtherNames);\n      body.append('MothersMaidenName', studentForm.MothersMaidenName);\n      body.append('Sex', studentForm.Sex);\n      body.append('DateOfBirth', studentForm.DateOfBirth);\n      body.append('Religion', studentForm.Religion);\n      body.append('Nationality', studentForm.Nationality);\n      body.append('ParentId', studentForm.ParentId[0].id);\n      body.append('StateOfOrigin', studentForm.StateOfOrigin);\n      body.append('LocalGovt', studentForm.LocalGovt);\n      body.append('TransportRoute', studentForm.TransportRoute);\n      body.append('EntryType', studentForm.EntryType);\n      body.append('AdmissionDate', studentForm.AdmissionDate);\n      body.append('SectionId', studentForm.SectionId);\n      body.append('ClassId', studentForm.ClassId);\n      body.append('StudentType', studentForm.StudentType);\n      body.append('ContactPhone', studentForm.ContactPhone);\n      body.append('ContactCountry', studentForm.ContactCountry);\n      body.append('ContactTown', studentForm.ContactTown);\n      body.append('ContactEmail', studentForm.ContactEmail);\n      body.append('ContactAddress', studentForm.ContactAddress);\n      body.append('ContactState', studentForm.ContactState);\n      body.append('BloodGroup', studentForm.BloodGroup);\n      body.append('Genotype', studentForm.Genotype);\n      body.append('Disability', studentForm.Disability);\n      body.append('Allergies', studentForm.Allergies);\n      body.append('ConfidentialNotes', studentForm.ConfidentialNotes);\n      body.append('Files', studentForm.profilePhoto);\n      studentForm.DocumentTypes.forEach(item => body.append('DocumentTypes', item));\n      for (let i = 0; i < immunizationVms.length; i++) {\n        body.append('immunizationVms[' + i + '].age', immunizationVms[i].age);\n        body.append('immunizationVms[' + i + '].date', immunizationVms[i].date);\n        body.append('immunizationVms[' + i + '].vaccine', immunizationVms[i].vaccine);\n      }\n      const url = `${this.baseUrl + routes.addstudent}`;\n      return this.http.post(url, body, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getAllStudents(p, perpage) {\n      const url = `${this.baseUrl + routes.getallstudent}?PageIndex=${p}&PageSize=${perpage}`;\n      // console.log(url);\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getStudentById(id) {\n      const url = `${this.baseUrl + routes.getstudentbyid}/${id}`;\n      // console.log(url);\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    searchSingleStudent(name) {\n      const url = `${this.baseUrl + routes.searchStudent}/${name}`;\n      // console.log(url);\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    updateStudent(id, updateStudentForm) {\n      const {\n        immunizationVms\n      } = updateStudentForm;\n      if (updateStudentForm.profilePhoto !== null) {\n        // // ('file not empty');\n        const body = new FormData();\n        body.append('FirstName', updateStudentForm.FirstName);\n        body.append('LastName', updateStudentForm.LastName);\n        body.append('OtherNames', updateStudentForm.OtherNames);\n        body.append('MothersMaidenName', updateStudentForm.MothersMaidenName);\n        body.append('Sex', updateStudentForm.Sex);\n        body.append('DateOfBirth', updateStudentForm.DateOfBirth);\n        body.append('Religion', updateStudentForm.Religion);\n        body.append('Nationality', updateStudentForm.Nationality);\n        body.append('ParentId', updateStudentForm.ParentId[0].id);\n        body.append('StateOfOrigin', updateStudentForm.StateOfOrigin);\n        body.append('LocalGovt', updateStudentForm.LocalGovt);\n        body.append('TransportRoute', updateStudentForm.TransportRoute);\n        body.append('EntryType', updateStudentForm.EntryType);\n        body.append('AdmissionDate', updateStudentForm.AdmissionDate);\n        body.append('SectionId', updateStudentForm.SectionId);\n        body.append('ClassId', updateStudentForm.ClassId);\n        body.append('StudentType', updateStudentForm.StudentType);\n        body.append('ContactPhone', updateStudentForm.ContactPhone);\n        body.append('ContactCountry', updateStudentForm.ContactCountry);\n        body.append('ContactTown', updateStudentForm.ContactTown);\n        body.append('ContactEmail', updateStudentForm.ContactEmail);\n        body.append('ContactAddress', updateStudentForm.ContactAddress);\n        body.append('ContactState', updateStudentForm.ContactState);\n        body.append('BloodGroup', updateStudentForm.BloodGroup);\n        body.append('Genotype', updateStudentForm.Genotype);\n        body.append('Disability', updateStudentForm.Disability);\n        body.append('Allergies', updateStudentForm.Allergies);\n        body.append('ConfidentialNotes', updateStudentForm.ConfidentialNotes);\n        body.append('Files', updateStudentForm.profilePhoto);\n        updateStudentForm.DocumentTypes.forEach(item => body.append('DocumentTypes', item));\n        for (let i = 0; i < immunizationVms.length; i++) {\n          body.append('immunizationVms[' + i + '].age', immunizationVms[i].age);\n          body.append('immunizationVms[' + i + '].date', immunizationVms[i].date);\n          body.append('immunizationVms[' + i + '].vaccine', immunizationVms[i].vaccine);\n        }\n        const url = `${this.baseUrl + routes.updatestudentbyid}/${id}`;\n        return this.http.put(url, body, {\n          headers: {\n            Authorization: 'Bearer ' + localStorage.getItem('access_token')\n          }\n        });\n      } else {\n        // console.log('no file selected');\n        const body = new FormData();\n        body.append('FirstName', updateStudentForm.FirstName);\n        body.append('LastName', updateStudentForm.LastName);\n        body.append('OtherNames', updateStudentForm.OtherNames);\n        body.append('MothersMaidenName', updateStudentForm.MothersMaidenName);\n        body.append('Sex', updateStudentForm.Sex);\n        body.append('DateOfBirth', updateStudentForm.DateOfBirth);\n        body.append('Religion', updateStudentForm.Religion);\n        body.append('Nationality', updateStudentForm.Nationality);\n        body.append('ParentId', updateStudentForm.ParentId[0].id);\n        body.append('StateOfOrigin', updateStudentForm.StateOfOrigin);\n        body.append('LocalGovt', updateStudentForm.LocalGovt);\n        body.append('TransportRoute', updateStudentForm.TransportRoute);\n        body.append('EntryType', updateStudentForm.EntryType);\n        body.append('AdmissionDate', updateStudentForm.AdmissionDate);\n        body.append('SectionId', updateStudentForm.SectionId);\n        body.append('ClassId', updateStudentForm.ClassId);\n        body.append('StudentType', updateStudentForm.StudentType);\n        body.append('ContactPhone', updateStudentForm.ContactPhone);\n        body.append('ContactCountry', updateStudentForm.ContactCountry);\n        body.append('ContactTown', updateStudentForm.ContactTown);\n        body.append('ContactEmail', updateStudentForm.ContactEmail);\n        body.append('ContactAddress', updateStudentForm.ContactAddress);\n        body.append('ContactState', updateStudentForm.ContactState);\n        body.append('BloodGroup', updateStudentForm.BloodGroup);\n        body.append('Genotype', updateStudentForm.Genotype);\n        body.append('Disability', updateStudentForm.Disability);\n        body.append('Allergies', updateStudentForm.Allergies);\n        body.append('ConfidentialNotes', updateStudentForm.ConfidentialNotes);\n        for (let i = 0; i < immunizationVms.length; i++) {\n          body.append('immunizationVms[' + i + '].age', immunizationVms[i].age);\n          body.append('immunizationVms[' + i + '].date', immunizationVms[i].date);\n          body.append('immunizationVms[' + i + '].vaccine', immunizationVms[i].vaccine);\n        }\n        const url = `${this.baseUrl + routes.updatestudentbyid}/${id}`;\n        return this.http.put(url, body, {\n          headers: {\n            Authorization: 'Bearer ' + localStorage.getItem('access_token')\n          }\n        });\n      }\n    }\n    deleteStudentById(id, payload) {\n      const body = new FormData();\n      body.append('sessionName', payload.sessionName);\n      body.append('DeactivationReason', payload.DeactivationReason.reason);\n      const options = {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        },\n        body\n      };\n      const url = `${this.baseUrl + routes.deletestudent}/${id}`;\n      return this.http.delete(url, options);\n    }\n    getStudentProfile(id) {\n      const url = `${this.baseUrl + routes.viewstudentdetails}/${id}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    downloadSampleBulkSheet() {\n      const url = `${this.baseUrl + routes.getBulkDdownload}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    uploadBulkDocument(payload) {\n      const body = new FormData();\n      body.append('File', payload.Document);\n      const url = `${this.baseUrl + routes.bulkUpload}`;\n      return this.http.post(url, body, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    exportStudentExcelFile(classId) {\n      const url = `${this.baseUrl + routes.downloadStudentsReport}?classId=${classId}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    exportStudentPdf(classId) {\n      const url = `${this.baseUrl + routes.downloadStudentsReportInPdf}?classId=${classId}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getStudentInAClass(classId) {\n      const url = `${this.baseUrl + routes.getStudentInAClass}?classId=${classId}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getTotalUsersOnPlatform() {\n      const url = `${this.baseUrl + routes.getTotalUsersOnPlatform}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    static #_ = (() => this.ɵfac = function StudentService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || StudentService)(i0.ɵɵinject(i1.HttpClient));\n    })();\n    static #_2 = (() => this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: StudentService,\n      factory: StudentService.ɵfac,\n      providedIn: 'root'\n    }))();\n  }\n  return StudentService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}