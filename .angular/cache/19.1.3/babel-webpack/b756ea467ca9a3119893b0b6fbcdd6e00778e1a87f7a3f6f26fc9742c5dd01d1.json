{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst routes = {\n  addclassarm: 'schtrack-auth/api/v1/ClassArm/AddClassArm',\n  getallclassarm: 'schtrack-auth/api/v1/ClassArm/GetAllClassArms',\n  getclassarmById: 'schtrack-auth/api/v1/ClassArm/GetAllClassArm',\n  updateclassarm: 'schtrack-auth/api/v1/ClassArm/UpdateClassArm',\n  deleteclassarm: 'schtrack-auth/api/v1/ClassArm/DeleteClassArm'\n};\n// const routes = {\n//   addclassarm: 'api/v1/ClassArm/AddClassArm',\n//   getallclassarm: 'api/v1/ClassArm/GetAllClassArms',\n//   getclassarmById: 'schtrack-auth/api/v1/ClassArm/GetAllClassArm',\n//   updateclassarm: 'schtrack-auth/api/v1/ClassArm/UpdateClassArm',\n//   deleteclassarm: 'schtrack-auth/api/v1/ClassArm/DeleteClassArm'\n// };\nexport let ClassArmService = /*#__PURE__*/(() => {\n  class ClassArmService {\n    constructor(http) {\n      this.http = http;\n      this.baseUrl = environment.serverUrl;\n      this.baseUrl2 = environment.demourl;\n    }\n    addClassArm(classArmform) {\n      // const tenantId = '1'; // just a temporary header till email services is ready\n      // const body = new FormData();\n      // body.append('name', addclassForm.name);\n      // body.append('status', addclassForm.status);\n      // // (body);\n      const url = `${this.baseUrl + routes.addclassarm}`;\n      return this.http.post(url, classArmform, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getAllClassArm() {\n      // const tenantId = '1';\n      const url = `${this.baseUrl + routes.getallclassarm}`;\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    getClassArmById(id) {\n      const tenantId = '1';\n      // tslint:disable-next-line:max-line-length\n      return this.http.get(this.baseUrl + 'schtrack-auth/api/v1/ClassArm/GetClassArmById/' + id, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    updateClassArm(id, result) {\n      // const tenantId = '1';\n      // const body = new FormData();\n      // body.append('Name', name)\n      // body.append('Status', status)\n      // tslint:disable-next-line:max-line-length\n      return this.http.put(this.baseUrl + 'schtrack-auth/api/v1/ClassArm/UpdateClassArm/' + id, result, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    deleteClassArm(id) {\n      // const tenantId = '1';\n      const url = `${this.baseUrl + routes.deleteclassarm}/${id}`;\n      return this.http.delete(url, {\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n    }\n    static #_ = (() => this.ɵfac = function ClassArmService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || ClassArmService)(i0.ɵɵinject(i1.HttpClient));\n    })();\n    static #_2 = (() => this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ClassArmService,\n      factory: ClassArmService.ɵfac,\n      providedIn: 'root'\n    }))();\n  }\n  return ClassArmService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}